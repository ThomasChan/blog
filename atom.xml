<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Drake Leung(追客)</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://drakeleung.github.io/blog/"/>
  <updated>2016-07-19T13:02:36.258Z</updated>
  <id>http://drakeleung.github.io/blog/</id>
  
  <author>
    <name>Drake Leung(追客)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Mathematical Expressions Parser</title>
    <link href="http://drakeleung.github.io/blog/2016/07/14/a-mathematical-expressions-parser/"/>
    <id>http://drakeleung.github.io/blog/2016/07/14/a-mathematical-expressions-parser/</id>
    <published>2016-07-14T12:56:20.000Z</published>
    <updated>2016-07-19T13:02:36.258Z</updated>
    
    <content type="html">&lt;p&gt;更多信息可查看 &lt;a href=&quot;http://drakeleung.github.io/demo/slides/calc&quot;&gt;SLIDE&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;u95EE_u9898&quot;&gt;&lt;a href=&quot;#u95EE_u9898&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;我们的问题是这样子的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;写一个 &lt;code&gt;calculate&lt;/code&gt; 函数，他的参数是一个四则运算表达式字符串，返回结果则是该参数的求值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;calculate(&lt;span class=&quot;string&quot;&gt;&#39;1+2*3&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;calculate(&lt;span class=&quot;string&quot;&gt;&#39;1*(2+3)*4)&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 规则：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 1. 禁止 eval 及其类似物&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 2. 禁止第三方库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;u6700_u7B80_u5355_u7684_u601D_u8DEF&quot;&gt;&lt;a href=&quot;#u6700_u7B80_u5355_u7684_u601D_u8DEF&quot; class=&quot;headerlink&quot; title=&quot;最简单的思路&quot;&gt;&lt;/a&gt;最简单的思路&lt;/h2&gt;&lt;p&gt;假设字符串就是简单的 &lt;code&gt;1+2&lt;/code&gt;，那么最简单的想法当然是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;遍历该字符串，然后根据不同的操作符，计算其结果，重复之。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而，当字符串为 &lt;code&gt;1+2*3&lt;/code&gt; 时，得到的结果是 &lt;code&gt;9&lt;/code&gt; 而不是 &lt;code&gt;7&lt;/code&gt; 。这是因为我们并没有考虑到&lt;strong&gt;操作符的优先级&lt;/strong&gt;。并且，如果加上括号（&lt;code&gt;()&lt;/code&gt;）的话，那么优先级就变得更加复杂。&lt;/p&gt;
&lt;p&gt;所以啊，我们就想：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;能不能没有优先级，按顺序就好啦，这样就简单多了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u9006_u6CE2_u5170&quot;&gt;&lt;a href=&quot;#u9006_u6CE2_u5170&quot; class=&quot;headerlink&quot; title=&quot;逆波兰&quot;&gt;&lt;/a&gt;逆波兰&lt;/h2&gt;&lt;p&gt;只要努力 google 一下，我们就可以找到解决方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用「逆波兰表达式」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;像我们平时使用的 &lt;code&gt;1 + 1&lt;/code&gt; 就叫 &lt;em&gt;中缀表达式&lt;/em&gt; 。而 &lt;em&gt;逆波兰&lt;/em&gt;（&lt;em&gt;后缀表达式&lt;/em&gt; ）则形如 &lt;code&gt;1 1 +&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;现在，我们的问题就变成了:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;怎样把「中缀表达式」转换成「逆波兰表达式」？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Tokenizer&quot;&gt;&lt;a href=&quot;#Tokenizer&quot; class=&quot;headerlink&quot; title=&quot;Tokenizer&quot;&gt;&lt;/a&gt;Tokenizer&lt;/h2&gt;&lt;p&gt;第一步，我们需要做的是：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 假设我们的字符串形如：`&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 那么就要把他转换成这样的一个数组：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt;, value: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;operator&#39;&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt;, value: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;查看代码请点击 &lt;a href=&quot;https://github.com/DrakeLeung/calc/blob/master/src/tokenizer.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tokenizer&lt;/a&gt; 。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;toRPN&quot;&gt;&lt;a href=&quot;#toRPN&quot; class=&quot;headerlink&quot; title=&quot;toRPN&quot;&gt;&lt;/a&gt;toRPN&lt;/h2&gt;&lt;p&gt;第二步，我们要把得到的 tokens 转换成 &lt;em&gt;逆波兰&lt;/em&gt; 形式。这个时候需要用到 &lt;a href=&quot;/&quot;&gt;shunting-yard&lt;/a&gt; 算法。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;查看代码请点击 &lt;a href=&quot;https://github.com/DrakeLeung/calc/blob/master/src/toRPN.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;toRPN&lt;/a&gt; 。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Calculator&quot;&gt;&lt;a href=&quot;#Calculator&quot; class=&quot;headerlink&quot; title=&quot;Calculator&quot;&gt;&lt;/a&gt;Calculator&lt;/h2&gt;&lt;p&gt;第三步，也是我们最后一步。&lt;/p&gt;
&lt;p&gt;我们需要把创建一个 &lt;strong&gt;操作数栈&lt;/strong&gt; ，如果是操作数的话，push 到栈里去；如果是操作符的话，把栈里的前两个操作数 pop 出来，计算他们和该操作符的结果。然后把结果 push 到栈里。重复之，直到遍历完所有的 tokens 。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;查看代码请点击 &lt;a href=&quot;https://github.com/DrakeLeung/calc/blob/master/src/index.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;calculator&lt;/a&gt; 。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;u62BD_u8C61_u8BED_u6CD5_u6811&quot;&gt;&lt;a href=&quot;#u62BD_u8C61_u8BED_u6CD5_u6811&quot; class=&quot;headerlink&quot; title=&quot;抽象语法树&quot;&gt;&lt;/a&gt;抽象语法树&lt;/h2&gt;&lt;p&gt;其实，我们还能做些更有趣的事情。比如，构建一棵 AST 。做法其实和第三步差不多。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个 &lt;strong&gt;操作数栈&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;遍历 tokens&lt;/li&gt;
&lt;li&gt;如果 token 为操作数，则 push 到栈里。&lt;/li&gt;
&lt;li&gt;如果 token 为操作符，则把 栈里的两个操作数 pop 出来，与该操作符形成 AST 的一个节点，接着把该节点 push 到栈里去&lt;/li&gt;
&lt;li&gt;重复之，直到遍历完 tokens&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了 AST 之后，如果我们对其分别进行前序，中序，后序遍历的话，就可以得到 &lt;strong&gt;前缀表达式&lt;/strong&gt; ，&lt;strong&gt;中缀表达式&lt;/strong&gt; ，以及 &lt;strong&gt;后缀表达式&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;查看代码请点击 &lt;a href=&quot;https://github.com/DrakeLeung/calc/blob/master/src/parser.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;parser&lt;/a&gt; 。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;u9879_u76EE_u6E90_u7801&quot;&gt;&lt;a href=&quot;#u9879_u76EE_u6E90_u7801&quot; class=&quot;headerlink&quot; title=&quot;项目源码&quot;&gt;&lt;/a&gt;项目源码&lt;/h2&gt;&lt;p&gt;所有代码可查看：&lt;a href=&quot;https://github.com/DrakeLeung/calc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/DrakeLeung/calc&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;更多信息可查看 &lt;a href=&quot;http://drakeleung.github.io/demo/slides/calc&quot;&gt;SLIDE&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;u95EE_u9898&quot;&gt;&lt;a href=&quot;#u95EE_u9898&quot; class=&quot;headerl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>实现一个 flickr like 布局</title>
    <link href="http://drakeleung.github.io/blog/2016/04/29/justified-layout/"/>
    <id>http://drakeleung.github.io/blog/2016/04/29/justified-layout/</id>
    <published>2016-04-29T15:27:28.000Z</published>
    <updated>2016-05-02T11:19:01.906Z</updated>
    
    <content type="html">&lt;p&gt;Flickr 团队最近开源了他们图片布局的项目 - &lt;a href=&quot;https://github.com/flickr/justified-layout/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flickr’s Justified Layout&lt;/a&gt; 。那么，通过阅读其源代码后，我实现了一个简单版 - &lt;a href=&quot;https://github.com/DrakeLeung/demo/blob/gh-pages/toys%2Fjjjustify%2FREADME.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jjjustify&lt;/a&gt;。点击这里可以查看在线 &lt;a href=&quot;http://frontend-addiction.github.io/Baidu-IFE/stage03/task43/flickr/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;u6838_u5FC3_u7B97_u6CD5&quot;&gt;&lt;a href=&quot;#u6838_u5FC3_u7B97_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;核心算法&quot;&gt;&lt;/a&gt;核心算法&lt;/h2&gt;&lt;p&gt;整个应用的核心是：&lt;strong&gt;如何确定一行中的图片数量并且保持横纵比&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;首先，我们需要知道一个知识：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设我们一行的高度为 300 ，宽度为 1200 。那么在这一行中的所有图片的横纵比之和就小于等于这一行的横纵比，也就是 4:1 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们这里不用数学来证明。但是不妨想象，当一行中的图片都收缩或者拉伸之后，是可以占满整行的，这时，就相当于这一行。所以，当前行所有图片的横纵比之和要&lt;strong&gt;小于等于&lt;/strong&gt;初始设定的整行的横纵比。&lt;/p&gt;
&lt;img src=&quot;/2016/04/29/justified-layout/1.png&quot; alt=&quot;1.png&quot; title=&quot;&quot;&gt;
&lt;p&gt;但是，为了增加灵活性，我们可以&lt;strong&gt;设定一个容忍度&lt;/strong&gt;。他的取值范围是 &lt;code&gt;[0, 1]&lt;/code&gt; 。如果当前行所有图片的横纵比之和介于（初始设定的整行的横纵比 * (1 +- 容忍度）的话，我们都能接受（容忍），在当前行插入该图片。&lt;/p&gt;
&lt;p&gt;举个例子：初始设定的整行的横纵比（&lt;code&gt;targetRowAspectRatio&lt;/code&gt;）为 4 ，我们的容忍度（&lt;code&gt;tolerance&lt;/code&gt;）为 &lt;code&gt;0.25&lt;/code&gt; 。所以，只要图片们的横纵比之和介于 &lt;code&gt;targetRowAspectRatio * (1 - tolerance)&lt;/code&gt; 和 &lt;code&gt;targetRowAspectRatio * (1 + tolerance)&lt;/code&gt; 就让他们在当前行。&lt;/p&gt;
&lt;img src=&quot;/2016/04/29/justified-layout/2.png&quot; alt=&quot;2.png&quot; title=&quot;&quot;&gt;
&lt;p&gt;如果大于容忍后的横纵比的话，&lt;strong&gt;为了更加精确，我们可以比较绝对值&lt;/strong&gt;。看看插入图片后的横纵比之和 - targetRowAspectRatio 的绝对值小，还是插入图片前的横纵比之和 - targetRowAspectRatio 的绝对值小。哪个小就采用哪种方案。&lt;/p&gt;
&lt;p&gt;插入新图片前的绝对值为 &lt;code&gt;3.5&lt;/code&gt; :&lt;br&gt;&lt;img src=&quot;/2016/04/29/justified-layout/4.png&quot; alt=&quot;4.png&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;插入后的绝对值为 &lt;code&gt;0.5&lt;/code&gt; ，小于 &lt;code&gt;3.5&lt;/code&gt; ，所以我们选择在当前行插入该图片。&lt;br&gt;&lt;img src=&quot;/2016/04/29/justified-layout/3.png&quot; alt=&quot;3.png&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果小于容忍后的横纵比的话，假设还没插完图片，就继续插。如果已经插完了图片，这里我们可以选择是否铺满一行，还是就让他这样。这个时候我们的高度就是原始设定的高度。&lt;/p&gt;
&lt;p&gt;详细代码实现请参考 &lt;a href=&quot;https://github.com/DrakeLeung/demo/blob/gh-pages/toys%2Fjjjustify%2Frrrow.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rrrow.js&lt;/a&gt; 的 &lt;code&gt;addItem()&lt;/code&gt; 方法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Flickr 团队最近开源了他们图片布局的项目 - &lt;a href=&quot;https://github.com/flickr/justified-layout/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flick
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bubble sorting visually</title>
    <link href="http://drakeleung.github.io/blog/2016/03/27/bubble-sorting-visually/"/>
    <id>http://drakeleung.github.io/blog/2016/03/27/bubble-sorting-visually/</id>
    <published>2016-03-27T15:01:37.000Z</published>
    <updated>2016-03-27T18:02:29.822Z</updated>
    
    <content type="html">&lt;p&gt;TL;DR: &lt;a href=&quot;http://plnkr.co/edit/je2wWv?p=preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线例子和相关代码请查看这里。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文章的目的来源于知乎的一个问题：&lt;a href=&quot;https://www.zhihu.com/question/41642706&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我用js写了一个冒泡排序法，怎么用html和css把排序过程展现出来？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面讲一下要解决的几个问题和 tips。&lt;/p&gt;
&lt;h2 id=&quot;u5982_u4F55_u5B9E_u73B0_u300C_u4EA4_u6362_u300D_u7684_u52A8_u753B&quot;&gt;&lt;a href=&quot;#u5982_u4F55_u5B9E_u73B0_u300C_u4EA4_u6362_u300D_u7684_u52A8_u753B&quot; class=&quot;headerlink&quot; title=&quot;如何实现「交换」的动画&quot;&gt;&lt;/a&gt;如何实现「交换」的动画&lt;/h2&gt;&lt;p&gt;我觉得这个是整个应用的难点。&lt;/p&gt;
&lt;p&gt;看了 &lt;a href=&quot;http://visualgo.net/sorting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;visual.net&lt;/a&gt;，他的实现是利用 CSS3 的 &lt;code&gt;transform&lt;/code&gt; 函数里面的 &lt;code&gt;translate&lt;/code&gt;。这似乎是不错的想法，但是我发现要用 JS 获取 &lt;code&gt;translate&lt;/code&gt; 对应的值的话，&lt;a href=&quot;http://stackoverflow.com/questions/21912684/how-to-get-value-of-translatex-and-translatey&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有点麻烦&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接着，我又看了一个答案的&lt;a href=&quot;http://meowtec.github.io/demo/sort-v/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实现&lt;/a&gt;。他的方法是利用 CSS 中的 &lt;code&gt;left&lt;/code&gt;。而 &lt;code&gt;left&lt;/code&gt; 的值是相对于设定了 &lt;code&gt;position: relative&lt;/code&gt; 的 &lt;em&gt;parent&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;我不是很懂上面的方法。但是我想到了另一个方法：&lt;strong&gt;&lt;code&gt;left&lt;/code&gt; 是相对于他本身&lt;/strong&gt;。也就是设置他本身为 &lt;code&gt;position: relative&lt;/code&gt; 而不是他的 &lt;em&gt;parent&lt;/em&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.bar&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;/* must set, or not transition when value in falsy */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/*transition: left 1s;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我之所以设置 &lt;code&gt;left&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt;，是因为我们要用 CSS3 的 &lt;code&gt;transition&lt;/code&gt; 实现渐变的效果。&lt;/p&gt;
&lt;p&gt;然后，每次交换的时候，我们只需要把他当前的 &lt;code&gt;left&lt;/code&gt; 加/减 柱形图的宽度。没错，这就是这种方法的「缺点」之一，我们需要用 JS 写死柱形图的宽度。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;swap () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; getLeft = item =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(item.style.left.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// rm &#39;px&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  item1.style.left = &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.barWidth + getLeft(item1)&amp;#125;&lt;/span&gt;px`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  item2.style.left = &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;-this.barWidth + getLeft(item2)&amp;#125;&lt;/span&gt;px`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在交换的时候，我们要先找到对应的 DOM 元素，也就是上面代码中的 &lt;code&gt;item&lt;/code&gt; 和 &lt;code&gt;item2&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;怎么找？（假设我们排序的是一堆数字）&lt;br&gt;一开始我想到了两种方法。&lt;/p&gt;
&lt;p&gt;第一种是，根据数字，找到具有对用数字的 DOM 元素，就像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;swap (value1, value2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; item1 = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.el.querySelector(&lt;span class=&quot;string&quot;&gt;`[data-value=&#39;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;value1&amp;#125;&lt;/span&gt;&#39;]`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但这种方法是行不通的。为什么？&lt;br&gt;因为当有多个数字相同的时候，我们找到的 DOM 元素不一定是我们想要交换的。因为 &lt;code&gt;querySelector&lt;/code&gt; 返回的总是第一个匹配的元素。&lt;/p&gt;
&lt;p&gt;那我们在 &lt;code&gt;item1&lt;/code&gt; 后面才开始找 &lt;code&gt;item2&lt;/code&gt; 行不行？使用 CSS3 的 &lt;code&gt;~&lt;/code&gt; 选择器。比如这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;swap (value1, value2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; item1 = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.el.querySelector(&lt;span class=&quot;string&quot;&gt;`[data-value=&#39;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;value1&amp;#125;&lt;/span&gt;&#39;]`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; item2 = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.el.querySelector(&lt;span class=&quot;string&quot;&gt;`[data-value=&#39;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;value2&amp;#125;&lt;/span&gt;&#39;] ~ data-value=&#39;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;value2&amp;#125;&lt;/span&gt;&#39;]`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种方法有时可以，有时是不可以的。为什么？&lt;br&gt;因为我们的 DOM 结构根本就没有变化，只是用 CSS 的 &lt;code&gt;left&lt;/code&gt; 在视觉上改变了位置而已。&lt;/p&gt;
&lt;p&gt;因此，我们的第二种方法当然就是在交换的时候，不仅改变 &lt;code&gt;left&lt;/code&gt; 的值，而且交换 DOM 的位置。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swapDOM&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;element1, element2&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  element1.parentNode.insertBefore(element2, element1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，这种方法还是行不通的。因为 &lt;code&gt;insertBefore&lt;/code&gt; 会把 &lt;code&gt;element2&lt;/code&gt; 从 DOM 中删掉。这样的话，就没有了「交换」的渐变效果。&lt;/p&gt;
&lt;p&gt;果然，我们还是不能 DOM 元素。那么只能返回第一种方法。&lt;/p&gt;
&lt;p&gt;这个时候我突然想到了 React 中循环的时候需要写上 &lt;code&gt;key&lt;/code&gt; 属性。然后。。。然后只要把 &lt;code&gt;key&lt;/code&gt; 和 数字绑定在一起，查找数字对应的 DOM 元素只需要使用 &lt;code&gt;key&lt;/code&gt; 就行。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// data = [64, 39, 78, 36]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items = data.map((d, i) =&amp;gt; (&amp;#123;key: &lt;span class=&quot;string&quot;&gt;`key-&lt;span class=&quot;subst&quot;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;`&lt;/span&gt;, value: d&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;swap (key1, key2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; item1 = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.el.querySelector(&lt;span class=&quot;string&quot;&gt;`[data-key=&#39;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;key1&amp;#125;&lt;/span&gt;&#39;]`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;终于搞定了「交换」动画了，不知道有没有更好的实现方法呢？&lt;/p&gt;
&lt;h2 id=&quot;u4E3A_u4EC0_u4E48_u6211_u7684_u300C_u4EA4_u6362_u300D_u52A8_u753B_u4E00_u77AC_u95F4_u5C31_u8DD1_u5B8C_u4E86&quot;&gt;&lt;a href=&quot;#u4E3A_u4EC0_u4E48_u6211_u7684_u300C_u4EA4_u6362_u300D_u52A8_u753B_u4E00_u77AC_u95F4_u5C31_u8DD1_u5B8C_u4E86&quot; class=&quot;headerlink&quot; title=&quot;为什么我的「交换」动画一瞬间就跑完了&quot;&gt;&lt;/a&gt;为什么我的「交换」动画一瞬间就跑完了&lt;/h2&gt;&lt;p&gt;假设我们的排序算法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sort () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; items = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; items.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; items.length - i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; item1 = items[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; item2 = items[j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (less(item2.value, item1.value)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        swap(j, j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, items)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意到，我们的 &lt;code&gt;swap&lt;/code&gt; 函数是在 &lt;code&gt;for&lt;/code&gt; 循环里面调用的，这是没错的。&lt;/p&gt;
&lt;p&gt;然而我们的「交换」动画就跑完了，根本没有渐变的效果，我们想要的是等到前一个交换动画完成后，下一个才发生。为什么会这样？因为我们的两个 &lt;code&gt;for&lt;/code&gt; 是瞬间就可以跑完的= =&lt;/p&gt;
&lt;p&gt;怎么解决这个问题呢？&lt;code&gt;setInterval&lt;/code&gt;？好像会把排序算法的逻辑扰乱。&lt;br&gt;突然，我想到了 jQuery 好像有个动画队列的东西。&lt;/p&gt;
&lt;p&gt;也就是说，&lt;strong&gt;我们可以把所有的动画先放在一个队列里面。然后再一个一个地出队，一个一个地调用。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (less(item2.value, item1.value)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.queue.push(() =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.swap(item1.key, item2.key))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;play () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; intervalId = setInterval(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.queue.length === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      clearInterval(intervalId)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; swap = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.queue.shift()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      swap()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看了知乎上的答案，这个问题还有其他实现的方法。&lt;strong&gt;总的来说，就是如何解决异步编程问题。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips&quot;&gt;&lt;/a&gt;Tips&lt;/h2&gt;&lt;p&gt;可以利用 CSS 的 伪元素&lt;code&gt;::before&lt;/code&gt; 以及 &lt;code&gt;attr&lt;/code&gt; 函数，来实现柱形图上显示对应的数字。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.bar&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;::before&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;attr&lt;/span&gt;(data-value)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#233&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Continue&quot;&gt;&lt;a href=&quot;#Continue&quot; class=&quot;headerlink&quot; title=&quot;Continue&quot;&gt;&lt;/a&gt;Continue&lt;/h2&gt;&lt;p&gt;我们的代码还可以继续优化，比如接口如何设计，使得可以扩展于其他的排序算法。还有用户体验,比如，排序前中后状态的颜色都设为不同，等等。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;TL;DR: &lt;a href=&quot;http://plnkr.co/edit/je2wWv?p=preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线例子和相关代码请查看这里。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文章的目的来源于知乎的一个问题：&lt;a href
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>「译」Learning React Without Using React Part2</title>
    <link href="http://drakeleung.github.io/blog/2016/03/22/Learning-React-Without-Using-React-Part-2/"/>
    <id>http://drakeleung.github.io/blog/2016/03/22/Learning-React-Without-Using-React-Part-2/</id>
    <published>2016-03-22T08:12:22.000Z</published>
    <updated>2016-03-26T07:00:52.368Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/javascript-inside/learning-react-without-using-react-part-2-703621a89432#.guh60nwi7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;请阅读 &lt;a href=&quot;http://drakeleung.github.io/blog/2016/03/20/Learning-React-Without-Using-React-Part-1/&quot;&gt;Part 1&lt;/a&gt; 如果你还没有的话。&lt;/p&gt;
&lt;p&gt;让我们继续 Part1 没讲到的东西。&lt;br&gt;我们这两篇文章主要是专注于如何重构我们的 todo list。现在，我们的实现包含了可以渲染整个应用的函数（组合），还有管理我们状态（state）的 &lt;em&gt;store&lt;/em&gt;。然而，我们还有很多方法去优化我们的应用。&lt;a href=&quot;http://plnkr.co/edit/fjQbQwZpQlhd5wXoc9J8?p=preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整代码请查看这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先，我们还没有正确地处理事件。现在，我们的组件根本就没有绑定任何事件。在 React 里面，数据流是从上往下，而事件流则是从下往上（In React data flows down while events move up）。也就是说，当事件触发的时候，我们应该沿着组件链，从下往上找其对应的回调函数。比如，我们的 &lt;code&gt;ItemRow&lt;/code&gt; 函数应该调用一个从 &lt;code&gt;props&lt;/code&gt; 传递下来的函数。&lt;/p&gt;
&lt;p&gt;那么，我们怎么实现呢？下面是一个小尝试：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ItemRow&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; className = props.completed ? &lt;span class=&quot;string&quot;&gt;&#39;item completed&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;item&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;li&amp;gt;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .on(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, props.onUpdate.bind(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, props.id))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addClass(className)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .attr(&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;, props.id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .html(props.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面，我们给 &lt;code&gt;list&lt;/code&gt; 元素绑定了一个事件。当点击他们的时候，&lt;code&gt;onUpdate&lt;/code&gt; 函数就会被调用。&lt;/p&gt;
&lt;p&gt;现在，我们不妨定义一个函数，他可以在创建元素的时候同时为其绑定事件。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;tag, attrs, children&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elem = $(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;&#39;&lt;/span&gt;, + tag + &lt;span class=&quot;string&quot;&gt;&#39;&amp;gt;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; attrs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; val = attrs[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;on&#39;&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; event = key.substr(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;).toLowerCase()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      elem.on(event, val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      elem.attr(key, val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; elem.html(children)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样一来，我们的 &lt;code&gt;ItemRow&lt;/code&gt; 函数可以写成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function ItemRow (props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var className = props.completed ? &#39;item completed&#39; : &#39;item&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return createElement(&#39;li&#39;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id: props.id,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    class: props.className,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onClick: props.onUpdate.bind(null, props.id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, props.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是 React 中的 &lt;code&gt;createElement&lt;/code&gt; 函数是创建了一个 JavaScript 对象来表示 DOM 元素。还有一点，让我们来看看 React 中的 JSX 语法到底是怎样子的。&lt;/p&gt;
&lt;p&gt;下面就是一个 JSX 例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ( &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;el&#39;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;entry&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt; Hello &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着会转换成：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; SomeElement = React.createElement(&lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  id: &lt;span class=&quot;string&quot;&gt;&#39;el&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  className: &lt;span class=&quot;string&quot;&gt;&#39;entry&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后调用 &lt;code&gt;SomeElement&lt;/code&gt; 函数会返回一个像下面差不多的 JavaScript 对象：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: &lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  key: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ref: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  props: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    children: &lt;span class=&quot;string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    className: &lt;span class=&quot;string&quot;&gt;&#39;entry&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id: &lt;span class=&quot;string&quot;&gt;&#39;el&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;想要了解更多的话，请阅读 &lt;a href=&quot;https://medium.com/@dan_abramov/react-components-elements-and-instances-90800811f8ca#.x2b1qra2o&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Components, Elements, and Instances&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;回到我们的例子中，&lt;code&gt;onUpdate&lt;/code&gt; 函数是从哪里来的？&lt;/p&gt;
&lt;p&gt;现在来看看我们的 &lt;code&gt;render&lt;/code&gt; 函数。他定义了一个 &lt;code&gt;updateState&lt;/code&gt; 函数，然后通过 &lt;code&gt;props&lt;/code&gt; 把这个函数传给 &lt;code&gt;ItemList&lt;/code&gt; 组件。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;props, node&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateState&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;toggleId&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state.items.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;el&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (el.id === toggleId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        el.completed = !el.completed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    store.setState(state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.empty().append([ItemList(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    items: props.items,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onUpdate: updateState&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，&lt;code&gt;ItemList&lt;/code&gt; 函数会把 &lt;code&gt;onUpdate&lt;/code&gt; 传到每个 &lt;code&gt;ItemRow&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;functions extending(base, item) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $.extend(&amp;#123;&amp;#125;, item, base)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ItemsList&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; createElement(&lt;span class=&quot;string&quot;&gt;&#39;ul&#39;&lt;/span&gt;, &amp;#123;&amp;#125;, props.items&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .map(extending.bind(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &amp;#123;onUpdate: props.onUpdate&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .map(ItemRow)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过以上我们实现了：数据流是从下往下的，而事件流是从下往上。这就意味着我们可以把定义在全局的监听器移除掉（用来监听点击 item 的时候，改变他的状态）。我们把这个函数移到了 &lt;code&gt;render&lt;/code&gt; 函数里面，也就是前面所讲的 &lt;code&gt;updateState&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 我们还可以重构。 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在我们把 &lt;code&gt;input&lt;/code&gt; 和 &lt;code&gt;button&lt;/code&gt; 从 HTML 标签变成函数。因此，我们整个 HTML 文件就只剩下一个 &lt;code&gt;div&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;app&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们的 &lt;code&gt;input&lt;/code&gt; 元素很容易创建，就这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; input = createElement(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;, &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样地，我们也可以把监听搜索框按钮点击的全局函数放在我们的 &lt;code&gt;SearchBar&lt;/code&gt; 函数里面。&lt;code&gt;SearchBar&lt;/code&gt; 函数会返回一个 &lt;code&gt;input&lt;/code&gt; 和一个 &lt;code&gt;button&lt;/code&gt; 元素，他会通过 &lt;code&gt;props&lt;/code&gt; 传进来的回调函数来处理点击事件。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;functions SearchBar(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onButtonClick&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; val = $(&lt;span class=&quot;string&quot;&gt;&#39;#input&#39;&lt;/span&gt;).val()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&#39;#input&#39;&lt;/span&gt;).val(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    props.update(val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e.preventDefault()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; input = createElement(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;, &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; button = createElement(&lt;span class=&quot;string&quot;&gt;&#39;button&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id: &lt;span class=&quot;string&quot;&gt;&#39;add&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onClick: onButtonClick.bind(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;string&quot;&gt;&#39;Add&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; createElement(&lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;, &amp;#123;&amp;#125;, &amp;#123;input, button&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们的 &lt;code&gt;render&lt;/code&gt; 函数调用 &lt;code&gt;SearchBar&lt;/code&gt; 的同时传递正确的 &lt;code&gt;props&lt;/code&gt; 参数。在我们更新 &lt;code&gt;update&lt;/code&gt; 函数之前，让我们想想 &lt;em&gt;re-render&lt;/em&gt; 应该在哪里调用才是正确的。首先，忽略我们的 &lt;code&gt;store&lt;/code&gt;，把注意力集中在如何在一个 high level component 中处理 &lt;em&gt;state&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;目前为止，所有的函数都是 &lt;em&gt;stateless&lt;/em&gt; 的。接下来我们会创建一个函数，他会处理 &lt;em&gt;state&lt;/em&gt; ，以及在适当的时候更新子组件（children）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Container Component&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让我们来创建一个 high level container 吧。与此同时，为了更好理解，你可以阅读 &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.iy4tfncwt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Presentational and Container Component&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先，我们给这个 container component 取名为 &lt;code&gt;App&lt;/code&gt;。他所做的事情就是调用 &lt;code&gt;SearchBar&lt;/code&gt; 和 &lt;code&gt;ItemList&lt;/code&gt; 函数。现在，我们继续重构 &lt;code&gt;render&lt;/code&gt; 函数。其实就是把代码移到 &lt;code&gt;App&lt;/code&gt; 里面去而已。&lt;/p&gt;
&lt;p&gt;我们不妨先来看看 &lt;code&gt;render&lt;/code&gt; 现在是怎样子的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;component, node&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.empty().append(component)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;render(App(state), $(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们的 &lt;code&gt;render&lt;/code&gt; 函数只是简单地把整个应用渲染到指定的节点中。但是，React 的实现会比这个复杂一点，而我们仅仅把一棵 element tree 添加到指定的根节点中而已。但是抽象起来理解的话，这个已经足够了。&lt;/p&gt;
&lt;p&gt;现在，我们的 &lt;code&gt;App&lt;/code&gt; 函数其实就是我们旧的 &lt;code&gt;render&lt;/code&gt; 函数，除了 DOM 操作被删掉。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateSearchBar&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state.items.push(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      id: state.id++,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      text: value,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      completed: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateState&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;toggleId&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state.items.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;el&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (el.id === toggleId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        el.completed = !el.completed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    store.setState(state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SearchBar(&amp;#123;update: updateSearchBar&amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ItemsList(&amp;#123;items: props.items, onUpdate: updateState&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们还需要改进一样东西：我们访问的 &lt;code&gt;store&lt;/code&gt; 是全局的，并且重新渲染的话需要调用 &lt;code&gt;setState&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;我们现在来重构 &lt;code&gt;App&lt;/code&gt; 函数，使得他的子组件重新渲染的是不需要调用 &lt;code&gt;store&lt;/code&gt; 。那么应该要怎么实现呢？&lt;/p&gt;
&lt;p&gt;首先我们要忽略 &lt;code&gt;store&lt;/code&gt;，并且想想怎么调用 &lt;code&gt;setState&lt;/code&gt; 函数，从而使得组件和他的子组件重新渲染。&lt;/p&gt;
&lt;p&gt;我们需要跟踪这个 high level component 当前的状态，并且只要 &lt;code&gt;setState&lt;/code&gt; 一调用，就立马重新渲染。下面是一个简单的实现：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getInitialState&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      items: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      id: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _state = getInitialState(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _node = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setState&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;state&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _state = state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们通过调用 &lt;code&gt;getInitialState&lt;/code&gt; 来初始化我们的 &lt;code&gt;state&lt;/code&gt; ，然后每当使用 &lt;code&gt;setState&lt;/code&gt; 来更新状态的时候，我们会调用 &lt;code&gt;render&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;render&lt;/code&gt; 函数要么创建一个 node，要么简单地更新 node，只要 &lt;code&gt;state&lt;/code&gt; 发生改变。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// naive implement of render&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function render () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var children = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SearchBar(&amp;#123;update: updateSearchState&amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ItemList(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      items: _state.items,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      onUpdate: updateState&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (!_node) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return _node = createElement(&#39;div&#39;, &amp;#123;class: &#39;top&#39;&amp;#125;, children)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return _node.html(children)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很显然，这对性能来说是不好的。需要知道的是，React 中的 &lt;code&gt;setState&lt;/code&gt; 不会渲染整个应用，而是组件和他的子组件。&lt;/p&gt;
&lt;p&gt;下面是 &lt;code&gt;render&lt;/code&gt; 函数的最新代码，我们调用 &lt;code&gt;App&lt;/code&gt; 时不需要带任何参数，只是需要简单地调用 &lt;code&gt;getInitialState&lt;/code&gt;返回初始的状态。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;component, node&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.empty().append(component);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;render(App(), $(&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://plnkr.co/edit/ISi8AiVuYSfFIfMy9z6t?p=preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看的所有的代码请点击这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;继续改进&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果有一个函数，他会返回一个对象。这个对象包含了 &lt;code&gt;setState&lt;/code&gt; 函数，还能够区分传进来 &lt;code&gt;props&lt;/code&gt; 和 组件本身自己的 &lt;code&gt;state&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;差不多就像下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var App = createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  updateSearchState: function (string) &amp;#123; /*...*/ &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  updateState: function (obj) &amp;#123; /*... */ &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var children = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SearchBar(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateSearchState: this.updateSearchState&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ItemsList(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        items: this.state.items,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        onUpdate: this.updateState&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return createElement(&#39;div&#39;, &amp;#123;class: &#39;top&#39;&amp;#125;, children)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很幸运的是，在 React 中，你可以通过调用 &lt;code&gt;React.createClass&lt;/code&gt; 来创建组件。他提供了很多选择，比如 ES6 Class ，stateless function 等，&lt;a href=&quot;https://facebook.github.io/react/docs/reusable-components.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;更多请查看文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;综上，我们讲解了数据流如何从上往下，而事件从下往上。我们也看到了如何处理一个组件的状态。关于 React 的东西，还有很多要学习。下面的链接也许可以帮助到你。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;扩展阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/thinking-in-react.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thnking in React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Start React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/javascript-scene/jsx-looks-like-an-abomination-1c1ec351a918#.59q26eqe0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/petehunt/react-howto&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React How to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Removing User Interface Complexity, or Why React is Awesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.kcyewm6ab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Presentational and Container Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@dan_abramov/react-components-elements-and-instances-90800811f8ca#.xis6z3p1z&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Component, Elements, and Instances&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;结尾语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本来打算在这篇文章讲解如何创建一个 &lt;em&gt;advanced state container&lt;/em&gt; ，实现 &lt;em&gt;undo/redo&lt;/em&gt; 以及更多 feature ，但是我认为已经超出了这篇文章的范围。&lt;/p&gt;
&lt;p&gt;如果大家有兴趣的话，我也许会写 Part 2.1。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/javascript-inside/learning-react-without-using-react-part-2-703621a89432#.guh60nwi7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/javascript-inside/learning-react-without-using-react-part-2-703621a89432#.guh60nwi7&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>「译」Learning React Without Using React Part 1</title>
    <link href="http://drakeleung.github.io/blog/2016/03/20/Learning-React-Without-Using-React-Part-1/"/>
    <id>http://drakeleung.github.io/blog/2016/03/20/Learning-React-Without-Using-React-Part-1/</id>
    <published>2016-03-20T05:05:34.000Z</published>
    <updated>2016-03-26T03:08:51.104Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;原文链接：&lt;a href=&quot;https://medium.com/javascript-inside/learn-the-concepts-part-1-418952d968cb#.femmquo5d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learning React Without Using React Part 1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当我们谈起 React 的时候总是有很多疑惑。下面简单地介绍了 React 以及他的一些底层原理。&lt;/p&gt;
&lt;p&gt;当你完成 Part1 和 Part2 之后，你会学到什么呢？你也许就会知道你为什么需要 React 以及 Redux 类似的 state container （状态管理器）。&lt;/p&gt;
&lt;p&gt;然而，&lt;strong&gt;你并不需要学习&lt;/strong&gt;: JSX，ES6/ES*，Webpack，Hot Reloading，也不需要理解 Virtual DOM，甚至不需要 React 本身。&lt;/p&gt;
&lt;p&gt;那么，我们首先要做的是：&lt;/p&gt;
&lt;p&gt;阅读 &lt;a href=&quot;https://github.com/tastejs/todomvc/blob/gh-pages/examples/jquery/js/app.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jquery 实现的 TodoMVC&lt;/a&gt; 的代码。&lt;/p&gt;
&lt;p&gt;也许你会注意到有一个叫 &lt;code&gt;render&lt;/code&gt; 的方法，他会在某个事件触发或者数据更新的时候被调用。现在，我们从头来实现一个例子：当 &lt;code&gt;input&lt;/code&gt; 的值改变时，调用 &lt;code&gt;render&lt;/code&gt; 函数，并且更新 DOM 元素。（&lt;a href=&quot;http://plnkr.co/edit/fjQbQwZpQlhd5wXoc9J8?p=preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击这里可查看完整的代码&lt;/a&gt;）&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; state = &amp;#123;value: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;#input&#39;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;keyup&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  state.value = $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).val().trim()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&lt;span class=&quot;string&quot;&gt;&#39;#output&#39;&lt;/span&gt;).html(state.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;render()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们使用一个全局变量 &lt;code&gt;state&lt;/code&gt; 来同步所有的东西。也就是说，当 &lt;em&gt;input&lt;/em&gt; 的值改变时会更新两样东西：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更新整个应用的 &lt;code&gt;state&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更新 DOM（根据应用当前的 &lt;code&gt;state&lt;/code&gt; 来调用 &lt;code&gt;render&lt;/code&gt; 函数）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先记住这些，我们等一下就会返回来。&lt;/p&gt;
&lt;p&gt;现在，我们有了一个新想法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;output&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;div&amp;gt;&#39;&lt;/span&gt; + text + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;显然，调用 &lt;code&gt;output(foo)&lt;/code&gt; 就会返回 &lt;code&gt;&amp;#39;&amp;lt;div&amp;gt;foo&amp;lt;/div&amp;gt;&amp;#39;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么接下来：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;h2&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;text&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;h2&amp;gt;&#39;&lt;/span&gt; + text + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/h2&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;text&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;div&amp;gt;&#39;&lt;/span&gt; + text + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;header&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;text&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; div(h2(text))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(header(&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;) === &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;foo&amp;lt;/h2&amp;gt;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的函数都是基于一个 &lt;em&gt;text(input)&lt;/em&gt; 然后返回一个 &lt;em&gt;string(text)&lt;/em&gt; 。调用 &lt;code&gt;header&lt;/code&gt; 的时候传入相同的参数（&lt;em&gt;input&lt;/em&gt;），都会得到相同的字符串（&lt;em&gt;output&lt;/em&gt;）。如果你在想思考 React 中的 &lt;strong&gt;stateless functions&lt;/strong&gt; 的话，那么这个其实就是一个简化版。只是 Stateless functions 会返回一个 React Element 而不是一个简单的 string ，但是思路是一样的。&lt;/p&gt;
&lt;p&gt;既然这样，我们就把这个想法应用到我们之前的例子中。我们添加了一个 &lt;code&gt;button&lt;/code&gt;，用来添加 todo item 。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; state = &amp;#123;items: [], id: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;#add&#39;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = $(&lt;span class=&quot;string&quot;&gt;&#39;#input&#39;&lt;/span&gt;).val().trim()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&lt;span class=&quot;string&quot;&gt;&#39;#input&#39;&lt;/span&gt;).val(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  state.items.push(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id: state.id++,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text: value,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    completed: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;#list&#39;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; toggleId = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;($(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).attr(&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  state.items.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;el&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    el.id === toggleId &amp;amp;&amp;amp; (el.completed = !el.completed)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; items = state.items.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; completed = item.completed ? &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;li class=&quot;item + &#39;&lt;/span&gt; + completed + &lt;span class=&quot;string&quot;&gt;&#39;&quot; id=&quot;&#39;&lt;/span&gt; + item.id + &lt;span class=&quot;string&quot;&gt;&#39;&quot;&amp;gt;(&#39;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      item.id + &lt;span class=&quot;string&quot;&gt;&#39;) &#39;&lt;/span&gt; + item.text + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/li&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;).join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; html = &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;ul&amp;gt;&#39;&lt;/span&gt; + items = &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/ul&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&lt;span class=&quot;string&quot;&gt;&#39;#list&#39;&lt;/span&gt;).html(html)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;render()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果图如下。我们的应用现在可以显示所有的 todo，也可以改变每个 todo 的状态（进行中或者完成）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ouOYh6bI3q_8y1XLCoVD-A.png&quot; alt=&quot;simple todo lsit&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上面，我们定义了两个 &lt;code&gt;click&lt;/code&gt; 事件，当他们触发时就会更新我们的 &lt;code&gt;state&lt;/code&gt; 以及调用 &lt;code&gt;render&lt;/code&gt; 函数。而 &lt;code&gt;render&lt;/code&gt; 函数会创建一个 todo list 。 &lt;code&gt;state&lt;/code&gt; 作为中间媒介，简化了事件和 DOM 元素之间的交互，而不是&lt;strong&gt; 通过事件来直接操作 DOM &lt;/strong&gt; （不需要定义每个 DOM 元素和每个事件以及他们之间的关系）。当某个 &lt;em&gt;action&lt;/em&gt;（如 click 事件） 触发之后，&lt;code&gt;state&lt;/code&gt; 就会更新，接着调用 &lt;code&gt;render&lt;/code&gt; 函数，最后我们的应用就会更新。这样一来，就简化了好多复杂的交互。&lt;/p&gt;
&lt;p&gt;上面的例子是很好的，我们不妨再来重构他。&lt;/p&gt;
&lt;p&gt;可以看到，&lt;code&gt;render&lt;/code&gt; 函数有一点乱。我们不妨创建一个函数，他接收一个参数（input），然后基于这个参数返回一个字符串（output）。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ItemRow&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; className = props.completed ? &lt;span class=&quot;string&quot;&gt;&#39; item completed&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;item&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;li className=&quot;&#39;&lt;/span&gt; + className +&lt;span class=&quot;string&quot;&gt;&#39; &quot;&amp;gt;&#39;&lt;/span&gt; + props.text + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/li&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ItemsList&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;ul&amp;gt;&#39;&lt;/span&gt; + props.items.map(ItemRow).join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/ul&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，现在我们的 &lt;code&gt;render&lt;/code&gt; 函数优美多了：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&lt;span class=&quot;string&quot;&gt;&#39;#list&#39;&lt;/span&gt;).html(ItemsList(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    items: state.items&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果 &lt;code&gt;render&lt;/code&gt; 函数并不知道 &lt;code&gt;state&lt;/code&gt; 是什么，而是期望一个 &lt;em&gt;input&lt;/em&gt; 作为参数呢？好吧，现在我们可以重构一下 &lt;code&gt;render&lt;/code&gt; 函数，他期望接收一个 &lt;code&gt;props&lt;/code&gt; 对象（这其实就是 React Component 所期望的。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&lt;span class=&quot;string&quot;&gt;&#39;#list&#39;&lt;/span&gt;).html(ItemsList(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    items: props.items&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，&lt;code&gt;render&lt;/code&gt; 函数并不依赖外部的状态（state），这使得我们在调用 &lt;code&gt;render&lt;/code&gt; 时可以随便传入一个 &lt;em&gt;input&lt;/em&gt; ，也就意味着我们的应用重新渲染时，相同的 &lt;em&gt;input&lt;/em&gt; 会有相同的 &lt;em&gt;output&lt;/em&gt; 。需要注意的是，DOM 操作其实是一个 side effect，但是现在我们暂时忽略他。&lt;/p&gt;
&lt;p&gt;把 &lt;code&gt;state&lt;/code&gt; 从 &lt;code&gt;render&lt;/code&gt; 函数中分离出来，可以使得我们很容易实现 &lt;code&gt;Undo/Redo&lt;/code&gt;。这也意味着每当 &lt;em&gt; 当前的 state &lt;/em&gt; 改变时，我们能够创建一个 history ，保存这个当前的 state 。&lt;/p&gt;
&lt;p&gt;另外一个优化就是传一个 root node 作为参数，而不是写死在 &lt;code&gt;render&lt;/code&gt; 函数里面：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;props, node&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.html(ItemsList(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    items: props.items&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因此，我们可以这样调用 &lt;code&gt;render&lt;/code&gt; 函数：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;render(state, $(&lt;span class=&quot;string&quot;&gt;&#39;#list&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们会很容易想到：当 &lt;code&gt;state&lt;/code&gt; 改变的时候，能不能自动地更新应用？也就是，不用手动地调用 &lt;code&gt;render&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;现在，我们来创建一个 &lt;em&gt;store&lt;/em&gt; ，他的作用是当 &lt;code&gt;state&lt;/code&gt; 改变之后，就立马调用 &lt;code&gt;render&lt;/code&gt; 函数。下面的实现虽然简单，但也是一个 advanced state container 的雏形。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createStore&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;initialState&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _state = initialState || &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _listeners = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateListeners&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;state&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _listeners.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;listener&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      listener.cb(state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setState: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;state&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _state = state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      updateListeners(state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getState: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onUpdate: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;name, cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _listeners.push(&amp;#123;name: name, cb: cb&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，我们更新 &lt;code&gt;state&lt;/code&gt; 只需要简单地调用 &lt;code&gt;setState&lt;/code&gt; 方法。只要 &lt;code&gt;state&lt;/code&gt; 一改变，我们的 &lt;code&gt;render&lt;/code&gt; 函数就会被调用：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = createStore(store)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;store.onUpdate(&lt;span class=&quot;string&quot;&gt;&#39;rootRender&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;state&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render(state, $(&lt;span class=&quot;string&quot;&gt;&#39;#list&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://plnkr.co/edit/fjQbQwZpQlhd5wXoc9J8?p=preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击这里可查看完整的代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 现在我们学会了什么？ &lt;/strong&gt; 我们知道了简单的单向数据流（one-way data flow）的原则。我们给 &lt;code&gt;render&lt;/code&gt; 函数传了一个 &lt;code&gt;state&lt;/code&gt; 参数，然后 &lt;code&gt;state&lt;/code&gt; 就会像流水一样，流到 &lt;code&gt;render&lt;/code&gt; 函数的每个层次中。比如，&lt;code&gt;ItemRow&lt;/code&gt; 函数需要 &lt;code&gt;ItemsList&lt;/code&gt; 给他传进正确的参数。&lt;/p&gt;
&lt;p&gt;我们已经创建了多个组件（component），并且我们把这些组件组合（compose）在一起。回想一下前面的 &lt;code&gt;header&lt;/code&gt; 例子，我们把 &lt;code&gt;div&lt;/code&gt; 和 &lt;code&gt;h2&lt;/code&gt; 函数组合成了一个 &lt;code&gt;header&lt;/code&gt; 函数。并且，这些函数都是 &lt;em&gt;pure function&lt;/em&gt; ，这使得所有更新都是可预测的。&lt;/p&gt;
&lt;p&gt;并且，我们使用了 &lt;em&gt;store&lt;/em&gt; 来管理我们的 &lt;code&gt;state&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而，React 会用更好更优美的方法来实现上面这些东西。组件（组合），使用 Virtual DOM 优化渲染，单向数据流等等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…we can focus on examining React’s true strengths: composition, unidirectional data flow, freedom from DSLs, explicit mutation and static mental model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From &lt;a href=&quot;https://medium.com/@dan_abramov/youre-missing-the-point-of-react-a20e34a51e1a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dan Abramov - you’re missing the point of react&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们可以优化的东西还有很多，比如继续优化 state container，重构我们的 listeners，实现 undo/redo，以及更多更好的 feature。&lt;strong&gt;这些东西我们都会在 Part 2 呈现&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;原文链接：&lt;a href=&quot;https://medium.com/javascript-inside/learn-the-concepts-part-1-418952d968cb#.femmquo5d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learning React Without Using React Part 1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原文链接：&lt;a href=&quot;https://medium.com/javascript-inside/learn-the-concepts-part-1-418952d968cb#.femmquo5d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Medium 是如何加载图片的？</title>
    <link href="http://drakeleung.github.io/blog/2016/03/01/How-Medium-Load-Images/"/>
    <id>http://drakeleung.github.io/blog/2016/03/01/How-Medium-Load-Images/</id>
    <published>2016-03-01T09:11:29.000Z</published>
    <updated>2016-03-01T13:39:16.445Z</updated>
    
    <content type="html">&lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;首先，我们来看看 Medium 加载图片的效果是怎样子的：&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//player.vimeo.com/video/157258221&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;我的&lt;a href=&quot;http://drakeleung.github.io/blog/&quot;&gt;博客首页&lt;/a&gt;也实现了这种效果。下面我们就分析如何实现。&lt;/p&gt;
&lt;h2 id=&quot;How&quot;&gt;&lt;a href=&quot;#How&quot; class=&quot;headerlink&quot; title=&quot;How&quot;&gt;&lt;/a&gt;How&lt;/h2&gt;&lt;p&gt;我们随便打开 Medium 中有图片的&lt;a href=&quot;https://medium.com/tag/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;页面&lt;/a&gt;，然后 &lt;em&gt;审查元素&lt;/em&gt;，就可以得到：&lt;/p&gt;
&lt;img src=&quot;/2016/03/01/How-Medium-Load-Images/inspect.png&quot; alt=&quot;inspect.png&quot; title=&quot;&quot;&gt;
&lt;p&gt;简化之后得到：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;placeholder&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;prossiveMedia&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;img-samll&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;img-large&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现的过程大致如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用一个 &lt;code&gt;placeholder&lt;/code&gt; 来防止图片 &lt;em&gt;collapse&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;先加载一个很小的图片&lt;/li&gt;
&lt;li&gt;当这个小图片加载完毕之后，把他画在 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 里面，然后把图片弄模糊。&lt;/li&gt;
&lt;li&gt;当大图片加载完毕之后，显示他。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Do_it&quot;&gt;&lt;a href=&quot;#Do_it&quot; class=&quot;headerlink&quot; title=&quot;Do it&quot;&gt;&lt;/a&gt;Do it&lt;/h2&gt;&lt;p&gt;首先，HTML 结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;banner&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;placeholder&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;img-small&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;https://cdn-images-1.medium.com/freeze/max/27/1*sg-uLNm73whmdOgKlrQdZA.jpeg?q=20&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;data-large&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;https://cdn-images-1.medium.com/max/1800/1*sg-uLNm73whmdOgKlrQdZA.jpeg&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;.placeholder&lt;/code&gt; 是用来撑起 &lt;code&gt;.banner&lt;/code&gt; 的高度。因为如果我们想要让两张图片重叠的话，会用到 &lt;code&gt;position: absolute&lt;/code&gt;，定位元素会脱离文档流，那么 &lt;code&gt;.banner&lt;/code&gt; 的高度就会为 &lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.img-small&lt;/code&gt; 首先加载的是小图片。大图片的 URL 放在了 &lt;code&gt;data-large&lt;/code&gt; 属性里面。&lt;/p&gt;
&lt;p&gt;接下来是，CSS部分：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.banner&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; hidden&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.placeholder&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding-bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;66.6%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;transition&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; opacity &lt;span class=&quot;number&quot;&gt;1s&lt;/span&gt; linear&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.loaded&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.img-small&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;filter&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;blur&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-webkit-filter&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;blur&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;.banner&lt;/code&gt; 设置了 &lt;code&gt;relative&lt;/code&gt;，所以他成为了他 children (&lt;code&gt;.placeholder&lt;/code&gt;, &lt;code&gt;img&lt;/code&gt;) 的 &lt;em&gt;containning block&lt;/em&gt; 了。&lt;/p&gt;
&lt;p&gt;注意到，&lt;code&gt;.placeholder&lt;/code&gt; 设置了 &lt;code&gt;padding-bottom: 66.6%&lt;/code&gt;。&lt;code&gt;66.6%&lt;/code&gt; 是相对于他的 &lt;em&gt;containning block&lt;/em&gt; 的宽度，也就是 &lt;code&gt;.banner&lt;/code&gt; 的宽度。&lt;br&gt;这个值应该和 &lt;code&gt;img&lt;/code&gt; 的高度一样，这样一来，&lt;code&gt;.banner&lt;/code&gt; 的高度就是 &lt;code&gt;img&lt;/code&gt; 的高度了。&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;transition&lt;/code&gt; 让透明度变化有个渐变效果。&lt;/p&gt;
&lt;p&gt;实现模糊效果是使用了 &lt;code&gt;filter: blur()&lt;/code&gt;，而没有使用 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后，JavaScript 代码部分比较简单：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; app = (() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; imgSmall = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;.img-small&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; loadImage = () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; img = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Image()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    img.src = imgSmall.src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    img.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;load&#39;&lt;/span&gt;, (e) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      imgSmall.classList.add(&lt;span class=&quot;string&quot;&gt;&#39;loaded&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; imgLarge = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Image()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imgLarge.src = imgSmall.dataset.large&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imgLarge.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;load&#39;&lt;/span&gt;, (e) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      imgLarge.classList.add(&lt;span class=&quot;string&quot;&gt;&#39;loaded&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imgSmall.parentNode.appendChild(imgLarge)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loadImage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.loadImage()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是，我们不能直接监听 &lt;code&gt;.img-small&lt;/code&gt; 的 &lt;code&gt;load&lt;/code&gt; 事件，要 &lt;code&gt;new Image&lt;/code&gt;，然后赋予其 &lt;code&gt;src&lt;/code&gt;，然后我们就可以监听他的 &lt;code&gt;load&lt;/code&gt; 事件了。&lt;/p&gt;
&lt;p&gt;最后，为了凸显效果，我们要禁止缓存和设置较差的网络环境。具体做法如图：&lt;/p&gt;
&lt;img src=&quot;/2016/03/01/How-Medium-Load-Images/network.png&quot; alt=&quot;network.png&quot; title=&quot;&quot;&gt;
&lt;p&gt;实际效果如下：&lt;br&gt;&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;http://jsfiddle.net/5sLzjk99/embedded/js,resources,html,css,result/light&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2 id=&quot;Resources&quot;&gt;&lt;a href=&quot;#Resources&quot; class=&quot;headerlink&quot; title=&quot;Resources&quot;&gt;&lt;/a&gt;Resources&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jmperezperez.com/medium-image-progressive-loading-placeholder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Medium does progressive image loading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;首先，我们来看看 Medium 加载图片的效果是怎样子的：&lt;/p&gt;
&lt;div class=&quot;video-container&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为你的JavaScript代码写测试</title>
    <link href="http://drakeleung.github.io/blog/2016/02/17/Write-Test-For-Your-JavaScript/"/>
    <id>http://drakeleung.github.io/blog/2016/02/17/Write-Test-For-Your-JavaScript/</id>
    <published>2016-02-17T11:32:51.000Z</published>
    <updated>2016-03-22T15:00:15.000Z</updated>
    
    <content type="html">&lt;p&gt;下面会讲解如何使用 karama, jasmine 以及 webpack，来为我们的 ES6 代码编写测试。&lt;br&gt;（最后我写了一个可用的例子，请查看 &lt;a href=&quot;https://github.com/DrakeLeung/ES2015-Starter-Kit/tree/master&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES2015-Starter-Kit&lt;/a&gt; ）&lt;/p&gt;
&lt;h2 id=&quot;u8270_u96BE_u7684_u6289_u62E9&quot;&gt;&lt;a href=&quot;#u8270_u96BE_u7684_u6289_u62E9&quot; class=&quot;headerlink&quot; title=&quot;艰难的抉择&quot;&gt;&lt;/a&gt;艰难的抉择&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;首先，我们要写测试，用什么写？自己写一个函数，还是使用某个测试框架？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看起来，后者可观一点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;然后，有哪些测试框架可以选择？选哪个？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是，我们 google 之，找到 stackoverflow 的一个问题 &lt;a href=&quot;http://stackoverflow.com/questions/300855/javascript-unit-test-tools-for-tdd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript unit test tools for TDD&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;看了问题回答，很纠结，太多了不知道选择哪个！最后，我决定选择 &lt;a href=&quot;https://karma-runner.github.io/0.13/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Karma&lt;/a&gt;, &lt;a href=&quot;https://github.com/jasmine/jasmine&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jasmine&lt;/a&gt; 和 &lt;a href=&quot;http://mochajs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mocha&lt;/a&gt; 这三者之一，根据 Star 数量以及维护团队。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;那么，&lt;em&gt;Karma&lt;/em&gt;, &lt;em&gt;Jasmine&lt;/em&gt; 以及 &lt;em&gt;Mocha&lt;/em&gt; 这三者之间哪个好，有什么不同？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是，我们不妨 google，找到了 &lt;a href=&quot;http://stackoverflow.com/questions/24391462/what-are-the-differences-between-mocha-chai-karma-jasmine-should-js-etc-te&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What are the differences between mocha, chai, karma, jasmine, should.js, etc. testing frameworks?&lt;/a&gt; 这个问题。&lt;/p&gt;
&lt;p&gt;从回答中我们可以知道：&lt;em&gt;Karma&lt;/em&gt; 只是一个 test runner，他负责提供 environment。而 &lt;em&gt;Jasmine&lt;/em&gt; 和 &lt;em&gt;Mocha&lt;/em&gt; 是编写测试脚本的框架。也就是说，我们可以选择 &lt;em&gt;Karma + Jasmine&lt;/em&gt;或者 &lt;em&gt;Karma + Mocha&lt;/em&gt;。我们不妨先选择前者~&lt;/p&gt;
&lt;p&gt;综上所述，&lt;strong&gt;我们要使用 &lt;em&gt;Karma + Jasmine&lt;/em&gt; 组合来为我们的 JavaScript 代码写测试&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;u6218_u6597_u7684_u53F7_u89D2&quot;&gt;&lt;a href=&quot;#u6218_u6597_u7684_u53F7_u89D2&quot; class=&quot;headerlink&quot; title=&quot;战斗的号角&quot;&gt;&lt;/a&gt;战斗的号角&lt;/h2&gt;&lt;p&gt;接下来，我们根据文档（&lt;a href=&quot;https://karma-runner.github.io/0.13/intro/installation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;karma - Installation&lt;/a&gt;, &lt;a href=&quot;https://karma-runner.github.io/0.13/intro/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;karma - Configuration&lt;/a&gt; 和 &lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jasmine - introduction&lt;/a&gt;），很容易就能搞起来。&lt;/p&gt;
&lt;p&gt;在这里我想说的是：当编写多个测试脚本的时候，你也许可以使用 &lt;code&gt;beforeEach&lt;/code&gt; 和 &lt;code&gt;afterEach&lt;/code&gt;。他们分别会在每个测试（spec）的之前和之后执行一次。&lt;/p&gt;
&lt;h2 id=&quot;u526F_u672C&quot;&gt;&lt;a href=&quot;#u526F_u672C&quot; class=&quot;headerlink&quot; title=&quot;副本&quot;&gt;&lt;/a&gt;副本&lt;/h2&gt;&lt;p&gt;最后还有一个问题是&lt;em&gt;如何结合 &lt;a href=&quot;http://webpack.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack&lt;/a&gt;&lt;/em&gt; 来为我们的ES6代码编写测试。&lt;/p&gt;
&lt;p&gt;我不得不承认，这是一个很不错的问题。然而，我也通过google找到了答案。&lt;/p&gt;
&lt;p&gt;详细教程请看 &lt;em&gt;VueJS&lt;/em&gt; 的 &lt;a href=&quot;https://vuejs.github.io/vue-loader/workflow/testing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing&lt;/a&gt; 文档。&lt;/p&gt;
&lt;h2 id=&quot;u6218_u6597_u7684_u8363_u8000&quot;&gt;&lt;a href=&quot;#u6218_u6597_u7684_u8363_u8000&quot; class=&quot;headerlink&quot; title=&quot;战斗的荣耀&quot;&gt;&lt;/a&gt;战斗的荣耀&lt;/h2&gt;&lt;p&gt;你可以为你的仓库弄一个亮晶晶的 &lt;a href=&quot;https://docs.travis-ci.com/user/status-images/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;travis ci status image&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://travis-ci.org/travis-ci/travis-web.svg?branch=master&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;详细设置请查看 &lt;a href=&quot;https://docs.travis-ci.com/user/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;travis docs&lt;/a&gt;以及这篇教程 &lt;a href=&quot;http://www.sitepoint.com/testing-javascript-jasmine-travis-karma/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing JavaScript with Jasmine, Travis, and Karma&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后，如果还是不懂的话，可以查看我写的一个例子：&lt;a href=&quot;https://github.com/DrakeLeung/ES2015-Starter-Kit/tree/master&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES2015-Starter-Kit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Resources&quot;&gt;&lt;a href=&quot;#Resources&quot; class=&quot;headerlink&quot; title=&quot;Resources&quot;&gt;&lt;/a&gt;Resources&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/300855/javascript-unit-test-tools-for-tdd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript unit test tools for TDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24391462/what-are-the-differences-between-mocha-chai-karma-jasmine-should-js-etc-te&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What are the differences between mocha, chai, karma, jasmine, should.js, etc. testing frameworks?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vuejs.github.io/vue-loader/workflow/testing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vuejs - Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/testing-javascript-jasmine-travis-karma/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing JavaScript with Jasmine, Travis, and Karma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下面会讲解如何使用 karama, jasmine 以及 webpack，来为我们的 ES6 代码编写测试。&lt;br&gt;（最后我写了一个可用的例子，请查看 &lt;a href=&quot;https://github.com/DrakeLeung/ES2015-Starter-Kit/tre
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://drakeleung.github.io/blog/tags/JavaScript/"/>
    
      <category term="test" scheme="http://drakeleung.github.io/blog/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>实现一个简单的 AMD 模块加载器</title>
    <link href="http://drakeleung.github.io/blog/2016/02/11/implement-a-simple-AMD-module-loader/"/>
    <id>http://drakeleung.github.io/blog/2016/02/11/implement-a-simple-AMD-module-loader/</id>
    <published>2016-02-11T15:32:53.000Z</published>
    <updated>2016-03-22T15:01:20.000Z</updated>
    
    <content type="html">&lt;p&gt;(完整代码请看&lt;a href=&quot;https://github.com/DrakeLeung/tiny-module-loader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub - tiny module loader&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;不了解JavaScript模块化的请看&lt;a href=&quot;http://drakeleung.github.io/blog/2016/02/07/JavaScript-Module-A-Beginner-Guide/&quot;&gt;「译」JavaScript Modules Part1: A Beginner Guide&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;简单来说，AMD规范定义了模块加载的方式是异步的而不是同步。&lt;/p&gt;
&lt;p&gt;接着，语法是这样子的：&lt;code&gt;define&lt;/code&gt;函数去请求依赖。其中，第一个参数是依赖的模块数组，第二个参数是函数。当依赖都加载完毕之后，就会作为参数，传进这个函数里面。&lt;/p&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;为了探究 AMD 模块加载器的原理，我们不妨尝试着从零开始实现他。&lt;/p&gt;
&lt;p&gt;我们只实现一个 &lt;code&gt;define&lt;/code&gt; 函数。其他后面再慢慢完善。&lt;/p&gt;
&lt;h2 id=&quot;How&quot;&gt;&lt;a href=&quot;#How&quot; class=&quot;headerlink&quot; title=&quot;How&quot;&gt;&lt;/a&gt;How&lt;/h2&gt;&lt;p&gt;主要分成3部分：下载依赖，执行依赖并导出，读取依赖并执行回调(递归地)。&lt;/p&gt;
&lt;h3 id=&quot;u4E0B_u8F7D_u4F9D_u8D56&quot;&gt;&lt;a href=&quot;#u4E0B_u8F7D_u4F9D_u8D56&quot; class=&quot;headerlink&quot; title=&quot;下载依赖&quot;&gt;&lt;/a&gt;下载依赖&lt;/h3&gt;&lt;p&gt;接受一个依赖模块的URL，然后用Ajax请求。这时会返回包含文件内容的字符串。&lt;/p&gt;
&lt;p&gt;这个很简单，只是用&lt;em&gt;Promise&lt;/em&gt;简便一点而已。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// getModule.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fetchDeps = name =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;((resolve, reject) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; req = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    req.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;load&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (req.status &amp;lt; &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;) resolve(req.responseText)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; reject(req.status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    req.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      reject(req.status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    req.open(&lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;, name, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    req.send(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;u6267_u884C_u4F9D_u8D56&quot;&gt;&lt;a href=&quot;#u6267_u884C_u4F9D_u8D56&quot; class=&quot;headerlink&quot; title=&quot;执行依赖&quot;&gt;&lt;/a&gt;执行依赖&lt;/h3&gt;&lt;p&gt;由于请求依赖返回的是一个字符串。但我们想要的是把这个字符串当作 JavaScript 代码来执行，解决方法有2种，分别是 &lt;code&gt;eval()&lt;/code&gt; 和 &lt;code&gt;new Function()&lt;/code&gt;。我们采取后者。&lt;/p&gt;
&lt;p&gt;还有一种方法应该可以：动态创建 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// getModule.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; currentModule = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; getModule = code =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exports: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exported: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onExport: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  currentModule = &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, code)() &lt;span class=&quot;comment&quot;&gt;// work with eval(), as well&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  currentModule,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getModule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有一个我觉得是最难的问题：由于 &lt;code&gt;new Function()&lt;/code&gt; 执行的时候，是不返回东西的（其实我并不知道 &lt;code&gt;new Function&lt;/code&gt; 的工作原理)。&lt;/p&gt;
&lt;p&gt;所以，这个时候依赖虽然是请求回来并执行了，但是他依然还没有导出(&lt;code&gt;exports&lt;/code&gt;)。所以，返回的 &lt;code&gt;module&lt;/code&gt; 对象的 &lt;code&gt;exports&lt;/code&gt; 是 &lt;code&gt;null&lt;/code&gt;的。并且，我们还用了一个变量 &lt;code&gt;currentModule&lt;/code&gt; 还存储当前的变量。&lt;/p&gt;
&lt;h3 id=&quot;u5BFC_u51FA_u4F9D_u8D56_u5E76_u6267_u884C_u56DE_u8C03_u51FD_u6570&quot;&gt;&lt;a href=&quot;#u5BFC_u51FA_u4F9D_u8D56_u5E76_u6267_u884C_u56DE_u8C03_u51FD_u6570&quot; class=&quot;headerlink&quot; title=&quot;导出依赖并执行回调函数&quot;&gt;&lt;/a&gt;导出依赖并执行回调函数&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// myDefine.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// import &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   currentModule,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   getModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#125; from &#39;./getModule&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// import &amp;#123;fetchDeps&amp;#125; from &#39;./fetchDeps&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// import &amp;#123;whenDepsExported&amp;#125; from &#39;./whenDepsExported&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; define = (deps, callback) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; myModule = currentModule &lt;span class=&quot;comment&quot;&gt;// #0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; getDeps = deps.map(fetchDeps)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.all(getDeps)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(codes =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; modules = codes.map(getModule)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// #1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      modules.forEach(m =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        !m.exported &amp;amp;&amp;amp; m.onExport.push(() =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          whenDepsExported(callback, modules, myModule)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      whenDepsExported(callback, modules, myModule) &lt;span class=&quot;comment&quot;&gt;// #2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;#0&lt;/code&gt; 我们把 &lt;code&gt;currentModule&lt;/code&gt; 赋给一个局部变量，这样使得每个 &lt;code&gt;define&lt;/code&gt; 都有自己的「模块」。这个也是困惑了我好久的一步。我也似懂非懂，因为反正已经 work 起来了= =&lt;/p&gt;
&lt;p&gt;这个时候问题就来了。因为我们需要递归地加载依赖，那么，肯定是加载最外面的依赖，然后才到里面。如果没有了 &lt;code&gt;#1&lt;/code&gt;，那么就会执行 &lt;code&gt;#2&lt;/code&gt;，这样就会导致和想我们想要的相反，即先执行最里面的依赖的回调，再执行外面的。&lt;/p&gt;
&lt;p&gt;因此，我们把最里面的模块先放到一个数组里面，然后当他的依赖执行完之后，再去执行他的回调，这时他的回调的参数才有值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// whenDepsExported.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; whenDepsExported = (cb, deps, myModule) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!deps.every(dep =&amp;gt; dep.exported)) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// params for &#39;callback of define&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; args = deps.map(dep =&amp;gt; dep.exports)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; exports = cb.apply(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// #0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (myModule) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myModule.exports = exports&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myModule.exported = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myModule.onExport.forEach(f =&amp;gt; f())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; exports&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;#0&lt;/code&gt; 中，我们导出了依赖，并且执行了 &lt;code&gt;onExport&lt;/code&gt; 的回调函数。&lt;/p&gt;
&lt;h2 id=&quot;Wrap_up&quot;&gt;&lt;a href=&quot;#Wrap_up&quot; class=&quot;headerlink&quot; title=&quot;Wrap up&quot;&gt;&lt;/a&gt;Wrap up&lt;/h2&gt;&lt;p&gt;原理看起来不是很难，但自己实现一遍还是挺难的。&lt;/p&gt;
&lt;p&gt;不过 AMD，CommonJS 这些规范倒是改善了 JavaScript 模块系统，使得 JavaScript 能够在规模较大的项目中更加容易开发，以及维护。&lt;/p&gt;
&lt;p&gt;(完整代码请看&lt;a href=&quot;https://github.com/DrakeLeung/tiny-module-loader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub - tiny module loader&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;Resources&quot;&gt;&lt;a href=&quot;#Resources&quot; class=&quot;headerlink&quot; title=&quot;Resources&quot;&gt;&lt;/a&gt;Resources&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eloquentjavascript.net/10_modules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eloquent javascript - modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;(完整代码请看&lt;a href=&quot;https://github.com/DrakeLeung/tiny-module-loader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub - tiny module loader&lt;/a&gt;)&lt;/p&gt;
&lt;h2
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>「译」JavaScript Modules Part2: Module Bundling</title>
    <link href="http://drakeleung.github.io/blog/2016/02/08/JavaScript-Modules-Part-2/"/>
    <id>http://drakeleung.github.io/blog/2016/02/08/JavaScript-Modules-Part-2/</id>
    <published>2016-02-08T07:57:07.000Z</published>
    <updated>2016-02-08T08:12:23.919Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;(原文：&lt;a href=&quot;https://medium.freecodecamp.com/javascript-modules-part-2-module-bundling-5020383cf306#.m5o3ar7dt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Modules Part 2: Module Bundling&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Part 1，我讲解了什么是 &lt;em&gt;module&lt;/em&gt; ，为什么要使用他们，以及合并 module 的各种方法。在Part 2，我会讲解什么是 &lt;em&gt;bundle modules&lt;/em&gt; : 为什么要，不同方法的实现，以及 module 在今后web开发的情况。&lt;/p&gt;
&lt;h2 id=&quot;u4EC0_u4E48_u662F_module_bundling_3F&quot;&gt;&lt;a href=&quot;#u4EC0_u4E48_u662F_module_bundling_3F&quot; class=&quot;headerlink&quot; title=&quot;什么是 module bundling?&quot;&gt;&lt;/a&gt;什么是 module bundling?&lt;/h2&gt;&lt;p&gt;简单来说，&lt;em&gt;module bundling&lt;/em&gt; 其实就是把一组 module (以及他们的依赖)，按照正确的顺序，打包(bundle)到一个单独的文件(或者一组文件)里面。但是对于web开发来说，细节才是魔鬼 :)&lt;/p&gt;
&lt;h2 id=&quot;u4E3A_u4EC0_u4E48_u628A_u6240_u6709_u7684_module__u90FD_u6253_u5305_u5728_u4E00_u8D77_uFF1F&quot;&gt;&lt;a href=&quot;#u4E3A_u4EC0_u4E48_u628A_u6240_u6709_u7684_module__u90FD_u6253_u5305_u5728_u4E00_u8D77_uFF1F&quot; class=&quot;headerlink&quot; title=&quot;为什么把所有的 module 都打包在一起？&quot;&gt;&lt;/a&gt;为什么把所有的 module 都打包在一起？&lt;/h2&gt;&lt;p&gt;当你把程序分成多个 module 的时候，你很可能会把他们组织在不同的文件和文件夹中。偶尔你会有第三方 module ，比如&lt;code&gt;Underscore&lt;/code&gt;或者&lt;code&gt;React&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么，当用户浏览你的页面时，这些文件都会通过 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签引入到你的 HTML 文件。每个文件就需要一个 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签，就意味着，浏览器需要单独地加载每个文件，一个…接着…一个。&lt;/p&gt;
&lt;p&gt;…然而这对于页面的加载时间是很不友好的。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们 &lt;em&gt;bundle&lt;/em&gt;，或者 &lt;em&gt;concatenate&lt;/em&gt; 所有的文件到一个大文件里面(或者一组文件，根据情况)，这样就可以减少请求的数量。这个就是你听别的开发人员所说的「build step」或者「build process」。&lt;/p&gt;
&lt;p&gt;另一个加速 bundling 操作的的方法是「minify」(压缩)代码。&lt;em&gt;minification&lt;/em&gt; 就是从源代码中去除不必要的字符(比如，空格，注释，换行符等)。这样一来，不仅减少了代码的大小，而且不影响其本身的功能。&lt;/p&gt;
&lt;p&gt;更少的数据就意味着浏览器处理的时间更少，因为减少了下载文件的时间。如果你曾经见过文件名有后缀&lt;code&gt;min&lt;/code&gt;，比如&lt;code&gt;underscore.min.js&lt;/code&gt;，其实就是相对于完整版的一个不具可读性，压缩过的版本。&lt;/p&gt;
&lt;p&gt;像 &lt;em&gt;gulp&lt;/em&gt; 或者 &lt;em&gt;Grunt&lt;/em&gt; 这样的 Task runners，对开发者来说，是很容易进行&lt;code&gt;concatenations&lt;/code&gt;和&lt;code&gt;minification&lt;/code&gt;。这样一来，保证了代码对开发者的可读性的同时，也保证了对浏览器的优化。&lt;/p&gt;
&lt;h2 id=&quot;u5B9E_u73B0bundle_module_u7684_u5404_u79CD_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u5B9E_u73B0bundle_module_u7684_u5404_u79CD_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;实现bundle module的各种方法&quot;&gt;&lt;/a&gt;实现bundle module的各种方法&lt;/h2&gt;&lt;p&gt;当你使用标准的 module pattern (前面讲解的)的其中一种来定义 module 的时候，&lt;em&gt;concatenating&lt;/em&gt; 和 &lt;em&gt;minifying&lt;/em&gt; 你的文件是极好的，你所需要做的就是把你的一堆JavaScript代码打包在一起。&lt;/p&gt;
&lt;p&gt;但是，当你使用浏览器不能解析的非原生模块系统时，比如 CommonJS，AMD。你需要一种特殊的工具来把你的代码转换成浏览器可以解析的。这就是为什么 &lt;em&gt;Browserify&lt;/em&gt;，&lt;em&gt;RequireJS&lt;/em&gt;，&lt;em&gt;Webpack&lt;/em&gt;，和其他「module bundlers」又或者「module loaders」会出现。&lt;/p&gt;
&lt;p&gt;为了 bundling 或者 loading 你的代码，module bundlers 提供了好多额外的 feature。比如当你修改代码时自动重编译，还有提供调试时所需要的 source maps。&lt;/p&gt;
&lt;p&gt;现在让我们来看看 module bundling 的几种方法:&lt;/p&gt;
&lt;h3 id=&quot;Bundling_CommonJS&quot;&gt;&lt;a href=&quot;#Bundling_CommonJS&quot; class=&quot;headerlink&quot; title=&quot;Bundling CommonJS&quot;&gt;&lt;/a&gt;Bundling CommonJS&lt;/h3&gt;&lt;p&gt;从 Part1 可知，CommonJS 是同步加载 module 的，这是很好的除了对浏览器不适用之外。我提到过有解决方法——其中一种就是使用 &lt;em&gt;Browserify&lt;/em&gt; 。Browserify 可以给浏览器编译 CommonJS 的 module。&lt;/p&gt;
&lt;p&gt;举个例子，我们有一个 &lt;code&gt;main.js&lt;/code&gt; 文件，他 &lt;em&gt;import&lt;/em&gt; 了一个可以计算数组平均值的 module:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myDependency = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(‘myDependency’);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myGrades = [&lt;span class=&quot;number&quot;&gt;93&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;91&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myAverageGrade = myDependency.average(myGrades);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，我们有一个依赖(&lt;code&gt;myDependency&lt;/code&gt;)。使用下面的命令，&lt;em&gt;Browserify&lt;/em&gt; 会递归地把&lt;code&gt;main.js&lt;/code&gt;前面所有需要的module打包到一个单独的文件里(&lt;code&gt;bundle.js&lt;/code&gt;)：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;browserify main.js -o bundle.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Browserify&lt;/em&gt; 的实现方法：为了遍历你整个项目的依赖，他会把每个 &lt;code&gt;require&lt;/code&gt; 解析成 &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AST&lt;/a&gt;。当他计算出你项目的依赖关系时，他就会按照正确的顺序把他们都打包在一个单独的文件里面。因此，你只需要把一个单独的，带上&lt;code&gt;bundle.js&lt;/code&gt;的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签放在你的 HTML 文件里面。这样一来，只要一个 HTTP 请求，就可以加载所有的modules。豪爽~&lt;/p&gt;
&lt;p&gt;相似地，如果你有多个文件且有多个依赖，你只需要简单地告诉 &lt;em&gt;Browserify&lt;/em&gt; 你的 &lt;code&gt;entry file&lt;/code&gt;，然后坐下，&lt;em&gt;Browserify&lt;/em&gt; 就会开始施魔法。&lt;/p&gt;
&lt;p&gt;最后：准备好你打包好的文件，然后使用像 &lt;em&gt;Minify-JS&lt;/em&gt; 这样的工具来压缩的你的代码。&lt;/p&gt;
&lt;h3 id=&quot;Bundling_AMD&quot;&gt;&lt;a href=&quot;#Bundling_AMD&quot; class=&quot;headerlink&quot; title=&quot;Bundling AMD&quot;&gt;&lt;/a&gt;Bundling AMD&lt;/h3&gt;&lt;p&gt;如果你使用AMD，也许你会使用一个像&lt;code&gt;RequireJS&lt;/code&gt;或者&lt;code&gt;Curl&lt;/code&gt;这样的AMD加载器。一个module loader(vs. a bundler)会动态地加载module，当你程序需要的时候。&lt;/p&gt;
&lt;p&gt;提醒一下，AMD与CommonJS不同的地方之一是，前者是动态加载模块的。也就是说，有了AMD，你实际上不需要&lt;em&gt;build step&lt;/em&gt;(打包你所有的module到一个单独文件)，因为你是动态加载module——也就是只有当你需要module的时候才去下载文件，而不是当用户第一次浏览的时候，就把所有的module都下载。&lt;/p&gt;
&lt;p&gt;但在实际生产中，用户每次行为就需要请求下载对应的module是没有意义的。因此很多web开发者为了额外的性能，都会使用工具去打包和压缩他们的AMD modules，比如&lt;em&gt;RequireJS optimizer&lt;/em&gt;，&lt;em&gt;r.js&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;总的来说，AMD和CommonJS关于bundling的区别是：前者可以不需要build step。除非，你想&lt;em&gt;push the code live&lt;/em&gt;，这时你可以使用像&lt;code&gt;r.js&lt;/code&gt;这样的优化器。&lt;/p&gt;
&lt;p&gt;更多关于CommonJS和AMD的讨论，请查看这篇文章&lt;a href=&quot;http://tomdale.net/2012/01/amd-is-not-the-answer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tom Dale’s blog&lt;/a&gt; :)&lt;/p&gt;
&lt;h3 id=&quot;Webpack&quot;&gt;&lt;a href=&quot;#Webpack&quot; class=&quot;headerlink&quot; title=&quot;Webpack&quot;&gt;&lt;/a&gt;Webpack&lt;/h3&gt;&lt;p&gt;就目前的bundlers来说，&lt;em&gt;Webpack&lt;/em&gt;是锋芒初现的。他可以识别任意一种模块系统，比如CommonJS，AMD或者ES6。&lt;/p&gt;
&lt;p&gt;你也许会这样想到：既然我们已经有了Browserify和RequireJS这样的工具，为什么还需要Webpack。其实，Webpack提供了很有用的feature像&lt;strong&gt;code splitting&lt;/strong&gt;—把你的代码拆分成动态加载的「chuncks」。&lt;/p&gt;
&lt;p&gt;比如说，如果你的web应用有一块代码是在特定情况下才加载的，那么把所有的代码打包在一个单独的很大的文件里面就不是很适合了。在这种情况下，你可以使用&lt;em&gt;code splitting&lt;/em&gt;提取代码到按需加载的&lt;em&gt;chunks&lt;/em&gt;里面，这样就避免了用户首次访问时需要加载体积很大的&lt;code&gt;bundle.js&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Code splitting&lt;/em&gt;是Webpack提供的feature之一。网上有很多讨论Webpack和Browserify的文章，不妨看下面的链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/substack/68f8d502be42d5cd4942&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/substack/68f8d502be42d5cd4942&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/browserify-vs-webpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mattdesl.svbtle.com/browserify-vs-webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.namangoel.com/browserify-vs-webpack-js-drama&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.namangoel.com/browserify-vs-webpack-js-drama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ES6_Modules&quot;&gt;&lt;a href=&quot;#ES6_Modules&quot; class=&quot;headerlink&quot; title=&quot;ES6 Modules&quot;&gt;&lt;/a&gt;ES6 Modules&lt;/h2&gt;&lt;p&gt;接下来我会讨论ES6 modules，他也许在未来让以上的bundlers的使用变少(等一下你就会明白我在讲什么)。首先，让我们来理解ES6 modules是如何加载的。&lt;/p&gt;
&lt;p&gt;ES6 modules与AMD，CMD最大的不同之处在于，前者设计时考虑到了静态分析(static analysis)。这就意味着，当你&lt;code&gt;import&lt;/code&gt; 模块时，这个&lt;code&gt;import&lt;/code&gt;动作在编译的时候就完成了。也就是，在执行脚本之前，可以让我们移除掉不需要的&lt;code&gt;exports&lt;/code&gt;。移除掉不必要的&lt;code&gt;exports&lt;/code&gt;不但可以减少空间，还能减轻浏览器的压力。&lt;/p&gt;
&lt;p&gt;那么问题来了：这个和&lt;em&gt;dead code elimination&lt;/em&gt;(如使用UglifyJS去压缩代码)有什么不同？答案是：&lt;strong&gt;看情况&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(注意：&lt;em&gt;Dead code elimination&lt;/em&gt;其实是移除掉不必要的代码和变量。不妨这样想：他是把你&lt;strong&gt;打包后&lt;/strong&gt;的程序的多余的代码和变量移除掉。&lt;/p&gt;
&lt;p&gt;有时候，&lt;em&gt;dead code elimination&lt;/em&gt;在ES6 module和UglifyJS中是一样的，但有时候又不是。如果你想了解更多你可以查看在&lt;a href=&quot;https://github.com/rollup/rollup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rollup’s wiki&lt;/a&gt;的一个很棒的例子。&lt;/p&gt;
&lt;p&gt;ES6不同的地方在于实现dead code elimination的方法，叫&lt;strong&gt;tree shaking&lt;/strong&gt;。Tree shaking实际上与dead code elimination的理念是相反的。他只打包了你所必需的代码，而不是把不需要的代码移除掉。让我们来看一下tree shaking的一个例子：&lt;/p&gt;
&lt;p&gt;假设我们有一个&lt;code&gt;util.js&lt;/code&gt;文件 ，他有多个函数，我们用ES6的语法来导出他们。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, iterator&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(collection)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; collection.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      iterator(collection[i], i, collection);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; collection) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      iterator(collection[key], key, collection);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, test&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filtered = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  each(collection, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (test(item)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      filtered.push(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; filtered;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, iterator&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mapped = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  each(collection, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value, key, collection&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mapped.push(iterator(value));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mapped;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, iterator, accumulator&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startingValueMissing = accumulator === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  each(collection, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (startingValueMissing) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      accumulator = item;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      startingValueMissing = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      accumulator = iterator(accumulator, item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; accumulator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来，我们假设我们并不知道我们需要&lt;code&gt;util.js&lt;/code&gt;的哪一个函数，所以，在&lt;code&gt;main.js&lt;/code&gt;中我们这样引入他：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; Utils &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; ‘./utils.js’;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，我们开始使用其中的一个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; Utils &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; ‘./utils.js’;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Utils.each([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x) &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而，&lt;code&gt;main.js&lt;/code&gt;被&lt;em&gt;tree shaking&lt;/em&gt;编译之后，是长这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, iterator&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(collection)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; collection.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      iterator(collection[i], i, collection);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; collection) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      iterator(collection[key], key, collection);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;each([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意到，只有我们使用的&lt;code&gt;each&lt;/code&gt;被引入了，而不是&lt;code&gt;util.js&lt;/code&gt;里所有的函数。&lt;/p&gt;
&lt;p&gt;那么，如果我们使用&lt;code&gt;filter&lt;/code&gt;函数而不是&lt;code&gt;each&lt;/code&gt;的话，我们的&lt;code&gt;main.js&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; Utils &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; ‘./utils.js’;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Utils.filter([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x === &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;tree shaking 编译后，&lt;code&gt;main.js&lt;/code&gt;变成了这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, iterator&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(collection)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; collection.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      iterator(collection[i], i, collection);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; collection) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      iterator(collection[key], key, collection);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, test&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filtered = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  each(collection, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (test(item)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      filtered.push(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; filtered;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x === &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意到这个时候,&lt;code&gt;each&lt;/code&gt;和&lt;code&gt;filter&lt;/code&gt;都被引入了，这是因为&lt;code&gt;filter&lt;/code&gt;函数是依赖于&lt;code&gt;each&lt;/code&gt;的。&lt;/p&gt;
&lt;p&gt;很cool，对不对？&lt;/p&gt;
&lt;p&gt;我建议你通过&lt;em&gt;Rollup.js&lt;/em&gt;的 &lt;a href=&quot;http://rollupjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;live demo and editor&lt;/a&gt; ，去玩玩和了解一下tree shaking。        &lt;/p&gt;
&lt;h2 id=&quot;u6784_u5EFAES6_modules&quot;&gt;&lt;a href=&quot;#u6784_u5EFAES6_modules&quot; class=&quot;headerlink&quot; title=&quot;构建ES6 modules&quot;&gt;&lt;/a&gt;构建ES6 modules&lt;/h2&gt;&lt;p&gt;好的，现在我们知道了ES6 modules的加载很其他module format是不同的，但是我们还没讲怎么构建ES6 modules。&lt;/p&gt;
&lt;p&gt;不幸的是，ES6 modules 还需要额外的工作，因为浏览器还没有实现原生的ES6 module加载。&lt;/p&gt;
&lt;p&gt;下面有两种方法来构建/转换 ES6 modules，使得在浏览器中可以使用。其中，第一种是当前最常见的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用转换器(比如，Babel或者Traceur)，把你ES6代码转换成CommonJS，AMD或者UMD格式的ES5代码。然后把转换好的代码送到一个module bundler里去，比如Browserify或者Webpack，这样就创建了一个或多个打包好的文件。&lt;/li&gt;
&lt;li&gt;使用&lt;a href=&quot;http://rollupjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rollup.js&lt;/a&gt;：这种方法和前面的很相似，除了在打包之前会使用ES6 module的静态分析。他利用&lt;strong&gt;tree shaking&lt;/strong&gt;把最少的代码量打包。总体来说，Rollup.js比Webpack或者Browserify最大的好处是，当你使用ES6 module时，可以使你的代码的体积更小。需要注意的是，Rollup提供了多种格式来打包你的代码，包括ES6，CommonJS，AMD，CMD，UMD或者IIFE。IIFE和UMD可以适用于你的浏览器，但如果你选择了AMD，CommonJS或者ES6的话，你需要找其他方法把你的代码转成浏览器可以识别的，比如使用Browserify，Webpack，RequireJS等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Jumping_through_hoops&quot;&gt;&lt;a href=&quot;#Jumping_through_hoops&quot; class=&quot;headerlink&quot; title=&quot;Jumping through hoops&quot;&gt;&lt;/a&gt;Jumping through hoops&lt;/h2&gt;&lt;p&gt;作为web开发者，我们需要跳过这些繁文缛节。因为把ES6 modules代码转换成浏览器可以解释的ES5不是一件易事。&lt;/p&gt;
&lt;p&gt;问题就是：我们可以直接在浏览器使用ES6 module，且不用弄上面说到的两种方法吗？&lt;/p&gt;
&lt;p&gt;答案是：很快。&lt;/p&gt;
&lt;p&gt;ECMAScript现在已经有解决方案的规范了，叫做&lt;a href=&quot;https://github.com/ModuleLoader/es6-module-loader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript 6 module loader API&lt;/a&gt;。简单介绍，他是一种可编程的，基于Promise的API，可以动态加载你的modules，并且cache他们，使得随后的&lt;code&gt;import&lt;/code&gt;不需要加载另外一份新版本的module。&lt;/p&gt;
&lt;p&gt;他大概是这样子的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// myModule.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myModule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Hello, I am a module&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  hello() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hello!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  goodbye() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;goodbye!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.import(‘myModule’).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;myModule&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; myModule.hello();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ‘hello!’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外一种方法是，你可以直接在&lt;code&gt;script&lt;/code&gt;标签里，直接注明&lt;code&gt;type=module&lt;/code&gt;来定义modules。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; script type = &lt;span class=&quot;string&quot;&gt;&quot;module&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// loads the &#39;myModule&#39; export from &#39;mymodule.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;mymodule&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Hello(); &lt;span class=&quot;comment&quot;&gt;// &#39;Hello, I am a module!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; &lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你还没有看过module loader API的polyfill，我强烈建议你至少去&lt;a href=&quot;https://github.com/ModuleLoader/es6-module-loader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;看一看&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你想要测试一下这种方法的话，你可以试试&lt;a href=&quot;https://github.com/systemjs/systemjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SystemJS&lt;/a&gt;。他是基于&lt;a href=&quot;https://github.com/ModuleLoader/es6-module-loader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6 Module Loader polyfill&lt;/a&gt;创建的。他可以在浏览器和Node环境中，动态地加载任何格式的modules(ES6 modules，AMD，CommonJS以及全局的scripts)。他会跟踪所有已经加载到「module registry」的modules，避免了重新加载已经加载过的modules。值得提醒的是，他也可以自动地转换ES6 modules(如果你开启这个option的话)，还可以从任何一种模块格式中加载任何一种格式的模块。太棒了。&lt;/p&gt;
&lt;h2 id=&quot;u65E2_u7136_u6211_u4EEC_u5DF2_u7ECF_u6709_u4E86ES6_modules_uFF0C_u8FD8_u9700_u8981bundlers_u5417_uFF1F&quot;&gt;&lt;a href=&quot;#u65E2_u7136_u6211_u4EEC_u5DF2_u7ECF_u6709_u4E86ES6_modules_uFF0C_u8FD8_u9700_u8981bundlers_u5417_uFF1F&quot; class=&quot;headerlink&quot; title=&quot;既然我们已经有了ES6 modules，还需要bundlers吗？&quot;&gt;&lt;/a&gt;既然我们已经有了ES6 modules，还需要bundlers吗？&lt;/h2&gt;&lt;p&gt;ES6 modules的逐渐流行，产生了一些有趣的问题：&lt;/p&gt;
&lt;h3 id=&quot;HTTP/2_u4F1A_u4F7Fmodule_bundlers_u8FC7_u65F6_u5417_uFF1F&quot;&gt;&lt;a href=&quot;#HTTP/2_u4F1A_u4F7Fmodule_bundlers_u8FC7_u65F6_u5417_uFF1F&quot; class=&quot;headerlink&quot; title=&quot;HTTP/2会使module bundlers过时吗？&quot;&gt;&lt;/a&gt;HTTP/2会使module bundlers过时吗？&lt;/h3&gt;&lt;p&gt;对于HTTP/1，我们的每个TCP连接只允许一个请求。这就是为什么加载多个资源需要多个请求。有了HTTP/2，一切都变了。HTTP/2是&lt;em&gt;fully multiplexed&lt;/em&gt;，这就意味着多个请求和多个响应可以并行。这样一来，我们可以在一个TCP连接中，进行多个请求。&lt;/p&gt;
&lt;p&gt;既然每个HTTP/2请求的开销已经比HTTP/1小得多，那么长远来看，加载一堆的modules并不会降低很多的性能。于是有些人就认为，module bundling已经不需要了。这其实是有可能的，但是我们还要视情况而定。&lt;/p&gt;
&lt;p&gt;比如说，module bundling提供了HTTP/2没有提供的优点，像移除掉不需要的&lt;code&gt;exports&lt;/code&gt;从而减少空间。如果你搭建的网页是每个微小的&lt;code&gt;bit&lt;/code&gt;都会影响性能的话，那么bundling就给了你巨大的好处。另一方面，如果你对性能要求不是很高的话，你可以跳过构建过程，从而节省了一些时间。&lt;/p&gt;
&lt;p&gt;总起来说，我们现在离享受HTTP/2带来的好处还很远。我个人猜测build process还会持续一段时间。&lt;/p&gt;
&lt;h3 id=&quot;CommonJS_uFF0CAMD_u548CUMD_u8FD8_u8FC7_u65F6_u5417_uFF1F&quot;&gt;&lt;a href=&quot;#CommonJS_uFF0CAMD_u548CUMD_u8FD8_u8FC7_u65F6_u5417_uFF1F&quot; class=&quot;headerlink&quot; title=&quot;CommonJS，AMD和UMD还过时吗？&quot;&gt;&lt;/a&gt;CommonJS，AMD和UMD还过时吗？&lt;/h3&gt;&lt;p&gt;一旦ES6变成了标准，那么我们真的还需要非原生的module feature吗？&lt;/p&gt;
&lt;p&gt;我表示怀疑。&lt;/p&gt;
&lt;p&gt;如果只遵循单一的语法去加载和引入module，并且不需要中间步骤，这对于web开发者来说很棒的。但到达这一步还需要多久呢？&lt;/p&gt;
&lt;p&gt;机会是有的，但需要一段时间。&lt;/p&gt;
&lt;p&gt;并且，每个人都可以根据自己的口味去选择，因此「one truthful approach」并不会成为现实。&lt;/p&gt;
&lt;h2 id=&quot;u7ED3_u8BBA&quot;&gt;&lt;a href=&quot;#u7ED3_u8BBA&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;当开发者讨论modules和module bundling的时候，我希望这两篇文章可以帮助他们厘清这些术语。如果你有疑问的话，你回头看看&lt;a href=&quot;https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#.y8hs0nsne&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;part I&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;同样地，可以在评论中和我讨论，同时随时欢迎你提问题。&lt;/p&gt;
&lt;p&gt;Happy bundling :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(原文：&lt;a href=&quot;https://medium.freecodecamp.com/javascript-modules-part-2-module-bundling-5020383cf306#.m5o3ar7dt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Modules Part 2: Module Bundling&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;(原文：&lt;a href=&quot;https://medium.freecodecamp.com/javascript-modules-part-2-module-bundling-5020383cf306#.m5o3ar7dt&quot; target=&quot;_blank&quot; r
    
    </summary>
    
      <category term="翻译" scheme="http://drakeleung.github.io/blog/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>「译」JavaScript Modules Part1: A Beginner Guide</title>
    <link href="http://drakeleung.github.io/blog/2016/02/07/JavaScript-Module-A-Beginner-Guide/"/>
    <id>http://drakeleung.github.io/blog/2016/02/07/JavaScript-Module-A-Beginner-Guide/</id>
    <published>2016-02-07T13:50:52.000Z</published>
    <updated>2016-02-08T08:13:16.021Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;(原文：&lt;a href=&quot;https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#.4ufizwkud&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Modules: A Beginner’s Guide - Preethi Kasireddy&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你是刚接触 JavaScript 的话，像「module bundler vs. module loaders」， 「Webpack vs. Browserify」 以及「AMD vs. CommonJS」这些术语可以一下子把你搞晕。&lt;/p&gt;
&lt;p&gt;JavaScript的模块系统(module system)也许是很吓人的，但是对于web开发者来说，理解他是很重要的。&lt;/p&gt;
&lt;p&gt;在本文，我会使用通俗易懂的话(以及一些代码)来解释这些术语。我希望能帮助到你。&lt;/p&gt;
&lt;p&gt;注意：为了简单起见，我会分成2部分来说：Part 1 会解释什么是 &lt;em&gt;module&lt;/em&gt; 以及为什么要使用他们。Part 2 (在下周发表)会接着解释什么是 &lt;em&gt;bundle modules&lt;/em&gt; 以及其实现方法。&lt;/p&gt;
&lt;h2 id=&quot;Part_1_3A__u6709_u8C01_u53EF_u4EE5_u518D_u89E3_u91CA_u89E3_u91CA_u4EC0_u4E48_u662F_module__u5417_uFF1F&quot;&gt;&lt;a href=&quot;#Part_1_3A__u6709_u8C01_u53EF_u4EE5_u518D_u89E3_u91CA_u89E3_u91CA_u4EC0_u4E48_u662F_module__u5417_uFF1F&quot; class=&quot;headerlink&quot; title=&quot;Part 1: 有谁可以再解释解释什么是 module 吗？&quot;&gt;&lt;/a&gt;Part 1: 有谁可以再解释解释什么是 module 吗？&lt;/h2&gt;&lt;p&gt;好的作者会把他们的书籍分成多个章节；好的程序员也会把他们的程序分成多个模块。&lt;/p&gt;
&lt;p&gt;就像书的章节一样，module 只是单词(在这里，即是 code )的集合。&lt;/p&gt;
&lt;p&gt;但是，好的模块是高度包含自己独立的功能。这让他们可以根据需求更改，删除，增加，而不扰乱整个系统。&lt;/p&gt;
&lt;h2 id=&quot;u4E3A_u4EC0_u4E48_u4F7F_u7528_module__uFF1F&quot;&gt;&lt;a href=&quot;#u4E3A_u4EC0_u4E48_u4F7F_u7528_module__uFF1F&quot; class=&quot;headerlink&quot; title=&quot;为什么使用 module ？&quot;&gt;&lt;/a&gt;为什么使用 module ？&lt;/h2&gt;&lt;p&gt;使用modules对于大型，相互依赖的代码库来说是很多好处的。在我看来，最重要的是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) 可维护性：&lt;/strong&gt;根据定义，module 是独立的。一个设计良好的 module 是尽可能多地减少代码的耦合，从而他能够独立地开发和改进。当一个 module 的耦合度低的时候，更新他是很容易一件事情。&lt;/p&gt;
&lt;p&gt;回到我们书籍的例子，当你因为更新了一个章节，从而需要调整剩余章节的话，这简直是噩耗。相反，你更愿意编写章节的时候，不影响其他章节。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) 命名空间(namespacing)：&lt;/strong&gt;在 JavaScript 中，在 top-level 函数的作用域的外面的变量就是 &lt;em&gt;global&lt;/em&gt; (全局)变量，全局变量即是每个人都可以 access 他们。因为这样，就很容易造成”命名空间污染”，也就是无相关的代码共享全局变量。&lt;/p&gt;
&lt;p&gt;在毫无相关的代码中共享全局变量在开发中 &lt;a href=&quot;http://c2.com/cgi/wiki?GlobalVariablesAreBad&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;is a big no no&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在本文的下面，我们会解释 module 可以让我们避免命名空间污染，通过为我们的变量创建私有空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3) 可重用性：&lt;/strong&gt;我们不妨老实承认，我们过去是把一个项目的代码copy到另一个项目中。比方说，你copy了你之前项目的一些util方法到当前的项目中。&lt;/p&gt;
&lt;p&gt;这是很浪费时间的。但是慢着，如果使用 module ，一个我们可以不断复用的 module ，这不是很好吗？&lt;/p&gt;
&lt;h2 id=&quot;u4F60_u662F_u5982_u4F55_u5408_u5E76_u6A21_u5757_28incorporate_modules_29_3F&quot;&gt;&lt;a href=&quot;#u4F60_u662F_u5982_u4F55_u5408_u5E76_u6A21_u5757_28incorporate_modules_29_3F&quot; class=&quot;headerlink&quot; title=&quot;你是如何合并模块(incorporate modules)?&quot;&gt;&lt;/a&gt;你是如何合并模块(incorporate modules)?&lt;/h2&gt;&lt;p&gt;有很多方法可以在你的程序中合并模块。我们现在就来讲解他们的其中一些：&lt;/p&gt;
&lt;h3 id=&quot;Module_Pattern&quot;&gt;&lt;a href=&quot;#Module_Pattern&quot; class=&quot;headerlink&quot; title=&quot;Module Pattern&quot;&gt;&lt;/a&gt;Module Pattern&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Module pattern&lt;/em&gt; 其实就是模仿 &lt;em&gt;class&lt;/em&gt; 的概念(因为 JavaScript 并不真正地支持 class )，因此我们可以把公有方法，私有方法以及变量都保存在一个对象里面——这个就有点类似于 class 在其他编程语言(如 Java 或者 Python )中的使用。这可以让我们给公有方法创建 API ，然后暴露出去；并且同时可以把私有的变量和方法都封装在一个闭包作用域(closure scope)中。&lt;/p&gt;
&lt;p&gt;有几个方法可以实现 module pattern。在第一个例子中。我会使用 &lt;em&gt;anonymous closure&lt;/em&gt;。他会把我们所有的代码都放进一个匿名函数里面。(记住：在 JavaScript 中，&lt;code&gt;function&lt;/code&gt; 是创建作用域的唯一方法？)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子一：Anonymous closure&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// We keep these variables private inside this closure scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myGrades = [&lt;span class=&quot;number&quot;&gt;93&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;91&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; average = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; total = myGrades.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;accumulator, item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; accumulator + item&amp;#125;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Your average grade is &#39;&lt;/span&gt; + total / myGrades.length + &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; failing = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; failingGrades = myGrades.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item &amp;lt; &lt;span class=&quot;number&quot;&gt;70&lt;/span&gt;;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;You failed &#39;&lt;/span&gt; + failingGrades.length + &lt;span class=&quot;string&quot;&gt;&#39; times.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(failing());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ‘You failed 2 times.’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有了这个，我们的匿名函数就有了它自己的求值环境(evaluation environment)或者”closure”，并且我们可以立马对他求值(evaluate)。这可以让我们从 parent namespace(global) 中隐藏变量。&lt;/p&gt;
&lt;p&gt;这种方法的好处就是，你可以在匿名函数中使用局部变量而不会 overwrite(覆盖) 已经存在的全局变量，但与此同时，你还可以 access 全局变量，就像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; global = &lt;span class=&quot;string&quot;&gt;&#39;Hello, I am a global variable :)&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// We keep these variables private inside this closure scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myGrades = [&lt;span class=&quot;number&quot;&gt;93&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;91&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; average = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; total = myGrades.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;accumulator, item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; accumulator + item&amp;#125;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Your average grade is &#39;&lt;/span&gt; + total / myGrades.length + &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; failing = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; failingGrades = myGrades.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item &amp;lt; &lt;span class=&quot;number&quot;&gt;70&lt;/span&gt;;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;You failed &#39;&lt;/span&gt; + failingGrades.length + &lt;span class=&quot;string&quot;&gt;&#39; times.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(failing());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(global);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;You failed 2 times.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;Hello, I am a global variable :)&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意到在匿名函数2旁的括号是必须的，因为以关键字&lt;code&gt;function&lt;/code&gt;开头的语句会被认为是 &lt;em&gt;function declaration&lt;/em&gt; (记住，在 JavaScript 中，你是不能定义没有名字的function declaration。) 因此，这对括号就创建一个 &lt;em&gt;function expression&lt;/em&gt;。如果不明白的话，你可以&lt;a href=&quot;http://stackoverflow.com/questions/1634268/explain-javascripts-encapsulated-anonymous-function-syntax&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阅读这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子二：Global import&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另一个较流行的方法是 &lt;em&gt;global import&lt;/em&gt; ，就像 jQuery 一样。他有点类似于上面的　&lt;em&gt;anonymous closure&lt;/em&gt;，只是现在我们把全局变量作为参数传进了匿名函数中。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;globalVariable&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Keep this variables private inside this closure scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; privateFunction = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Shhhh, this is private!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Expose the below methods via the globalVariable interface while&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// hiding the implementation of the method within the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// function() block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  globalVariable.each = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, iterator&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(collection)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; collection.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        iterator(collection[i], i, collection);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; collection) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        iterator(collection[key], key, collection);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  globalVariable.filter = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, test&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filtered = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globalVariable.each(collection, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (test(item)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filtered.push(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; filtered;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  globalVariable.map = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, iterator&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mapped = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globalUtils.each(collection, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value, key, collection&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mapped.push(iterator(value));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mapped;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  globalVariable.reduce = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, iterator, accumulator&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startingValueMissing = accumulator === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globalVariable.each(collection, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(startingValueMissing) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accumulator = item;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        startingValueMissing = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accumulator = iterator(accumulator, item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; accumulator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;(globalVariable));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;globalVariable&lt;/code&gt; 在全局中唯一的一个变量。这个方法比前一个方法好的地方在于：你可以在前面就定义全局变量，这样就方便别人阅读你的代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子三：Object interface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建 module 的例子还有一个就是使用独立的 &lt;em&gt;object interface&lt;/em&gt;，就像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myGradesCalculate = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Keep this variable private inside this closure scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myGrades = [&lt;span class=&quot;number&quot;&gt;93&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;91&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Expose these functions via an interface while hiding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// the implementation of the module within the function() block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    average: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; total = myGrades.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;accumulator, item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; accumulator + item;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;Your average grade is &#39;&lt;/span&gt; + total / myGrades.length + &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    failing: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; failingGrades = myGrades.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item &amp;lt; &lt;span class=&quot;number&quot;&gt;70&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;You failed &#39;&lt;/span&gt; + failingGrades.length + &lt;span class=&quot;string&quot;&gt;&#39; times.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myGradesCalculate.failing(); &lt;span class=&quot;comment&quot;&gt;// &#39;You failed 2 times.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myGradesCalculate.average(); &lt;span class=&quot;comment&quot;&gt;// &#39;Your average grade is 70.33333333333333.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;显而易见，这种方法可以让我们自己定义哪些变量/方法是私有的(例如，&lt;code&gt;myGrads&lt;/code&gt;)，以及哪些变量/方法是我们想要暴露给他们的，通过 &lt;code&gt;return&lt;/code&gt; 语句(比如，&lt;code&gt;average&lt;/code&gt; &amp;amp; &lt;code&gt;failing&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子四：Revealing module pattern&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个跟上面的方法是很相似的，除了他保证所有的变量和方法都是私有的，直到我们显式地暴露出去：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myGradesCalculate = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Keep this variable private inside this closure scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myGrades = [&lt;span class=&quot;number&quot;&gt;93&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;91&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; average = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; total = myGrades.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;accumulator, item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; accumulator + item;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;Your average grade is &#39;&lt;/span&gt; + total / myGrades.length + &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; failing = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; failingGrades = myGrades.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item &amp;lt; &lt;span class=&quot;number&quot;&gt;70&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;You failed &#39;&lt;/span&gt; + failingGrades.length + &lt;span class=&quot;string&quot;&gt;&#39; times.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Explicitly reveal public pointers to the private functions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// that we want to reveal publicly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    average: average,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    failing: failing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myGradesCalculate.failing(); &lt;span class=&quot;comment&quot;&gt;// &#39;You failed 2 times.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myGradesCalculate.average(); &lt;span class=&quot;comment&quot;&gt;// &#39;Your average grade is 70.33333333333333.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面好像讲了好多东西，其实对于 module pattern 来说，只是冰山一角。下面是一些我认为比较有用的资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn JavaScript Design Patterns&lt;/a&gt; - by &lt;em&gt;Addy Osmani&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adequately Good by Ben Cherry&lt;/a&gt; - 通过例子讲述module pattern的高级使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://carldanley.com/js-module-pattern/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Blog of Carl Danley&lt;/a&gt; - module pattern的概述以及其他 JavaScript pattern 的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CommonJS_and_AMD&quot;&gt;&lt;a href=&quot;#CommonJS_and_AMD&quot; class=&quot;headerlink&quot; title=&quot;CommonJS and AMD&quot;&gt;&lt;/a&gt;CommonJS and AMD&lt;/h2&gt;&lt;p&gt;上面讲到的所有方法都有一个共同点：使用全局变量将其所有代码都封装在一个函数里面，从而使用 &lt;em&gt;closure scope&lt;/em&gt; 为他自己创建出了一个私有的命名空间。&lt;/p&gt;
&lt;p&gt;他们各自有各自的优点，但是他们也有他们的弊端。&lt;/p&gt;
&lt;p&gt;其中一个，作为一名开发者，为了加载你的文件，你需要知道正确的依赖顺序。比如，你要在项目中使用 &lt;code&gt;Backbone&lt;/code&gt;，那么你需要通过 &lt;code&gt;script&lt;/code&gt; 标签来加载他的源文件。&lt;/p&gt;
&lt;p&gt;但是，因为 &lt;code&gt;Backbone&lt;/code&gt; 是依赖 &lt;code&gt;Underscore.js&lt;/code&gt;，那么加载 &lt;code&gt;Backbone&lt;/code&gt; 的 &lt;code&gt;script&lt;/code&gt; 标签就不能在 &lt;code&gt;Underscore&lt;/code&gt; 的前面。&lt;/p&gt;
&lt;p&gt;作为一名开发者，维护依赖以及让他们的顺序都正确的话，有时是一件很头疼的事情。&lt;/p&gt;
&lt;p&gt;另一个弊端就是他们仍然会产生命名空间冲突。比如，你的两个 module 具有相同的名字。又或者，你的一个模块有两个版本，并且你同时需要他们。&lt;/p&gt;
&lt;p&gt;因此，你也会这样想到：能不能设计一种方法，既可以访问 module 的接口，但同时又不污染全局作用域。&lt;/p&gt;
&lt;p&gt;其实有两种已经实现好的方法：即是 CommonJS 和 AMD 。&lt;/p&gt;
&lt;h3 id=&quot;CommonJS&quot;&gt;&lt;a href=&quot;#CommonJS&quot; class=&quot;headerlink&quot; title=&quot;CommonJS&quot;&gt;&lt;/a&gt;CommonJS&lt;/h3&gt;&lt;p&gt;CommonJS是一个自愿的工作小组，设计和实现 JavaScript 模块系统的 API。&lt;/p&gt;
&lt;p&gt;一个 CommonJS 模块其实就是 &lt;code&gt;exports&lt;/code&gt; 了具体对象的 JavaScript 代码块，使得他们能够被程序中的其他模块 &lt;code&gt;require&lt;/code&gt; 。如果你写过 &lt;code&gt;Node.js&lt;/code&gt; 的话，你应该对他很熟悉。&lt;/p&gt;
&lt;p&gt;有了 CommonJS，每个 JavaScript 文件在他们各自唯一的 module context (就像封装在一个闭包中)保存了模块。在这个作用域里面，我们使用 &lt;code&gt;module.exports&lt;/code&gt; 对象来暴露模块，使用&lt;code&gt;require&lt;/code&gt;来加载他们。&lt;/p&gt;
&lt;p&gt;当你定义了一个 CommonJS 文件，也许他就长这样子的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myModule&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.hello = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;hello!&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.goodbye = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;goodbye!&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = myModule;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们使用特殊的对象&lt;code&gt;module&lt;/code&gt;，然后把我们函数的引用赋给&lt;code&gt;module.exports&lt;/code&gt;。这个让CommonJS的模块系统知道我们想要暴露哪些，从而让别的文件引用。&lt;/p&gt;
&lt;p&gt;然后，如果别人想使用我的&lt;code&gt;myModule&lt;/code&gt;，他们可以引用它到文件中，像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myModule = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;myModule&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myModuleInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; myModule();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myModuleInstance.hello(); &lt;span class=&quot;comment&quot;&gt;// &#39;hello!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myModuleInstance.goodbye(); &lt;span class=&quot;comment&quot;&gt;// &#39;goodbye!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法比前面所讲的 &lt;em&gt;module pattern&lt;/em&gt; 有2个明显的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;避免全局命名空间的污染&lt;/li&gt;
&lt;li&gt;让我们的依赖更加清晰&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而且，语法很简洁，我很喜欢。&lt;/p&gt;
&lt;p&gt;还有一个注意的是，CommonJS是针对server实现的，并且&lt;strong&gt;同步加载modules&lt;/strong&gt;。这是很重要的，因为如果我们有3个module需要引入，那么他会一个接着一个加载。&lt;/p&gt;
&lt;p&gt;现在，CommonJS对于server端很极好的。但是不幸的是，他不适用于浏览器。因为在web读取一个module比在磁盘中读取慢得多。如果开始加载module，就会阻塞浏览器直到modules全部加载完毕。(我会在 Part 2 讲述解决方法)。&lt;/p&gt;
&lt;h3 id=&quot;AMD&quot;&gt;&lt;a href=&quot;#AMD&quot; class=&quot;headerlink&quot; title=&quot;AMD&quot;&gt;&lt;/a&gt;AMD&lt;/h3&gt;&lt;p&gt;CommonJS是很好，但是如果我们想要异步加载modules呢？答案就是&lt;em&gt;Asynchronous Module Definition&lt;/em&gt;，即&lt;em&gt;AMD&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;使用AMD加载module就像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;define([&lt;span class=&quot;string&quot;&gt;&#39;myModule&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;myOtherModule&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;myModule, myOtherModule&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(myModule.hello());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;define&lt;/code&gt;函数的第一个参数是一个数组，他包含了所需的依赖。这些依赖会在背后加载(不会阻塞)，而且一旦加载完毕，&lt;code&gt;define&lt;/code&gt;就会调用传给他的callback函数。&lt;/p&gt;
&lt;p&gt;接着，callback函数就会把加载好的依赖作为他的参数——在上面例子中，即是&lt;code&gt;myModule&lt;/code&gt;和&lt;code&gt;myOtherModule&lt;/code&gt;。最后，这些依赖他们自己必须通过关键字&lt;code&gt;define&lt;/code&gt;来定义。&lt;/p&gt;
&lt;p&gt;比如，&lt;code&gt;myModule&lt;/code&gt;也许是这样子的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;define([], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hello: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    goodbye: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;goodbye&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不像CommonJS，AMD是以浏览器为核心来实现异步加载module的。(注意到，有很多人强烈地认为动态加载文件是不好的，这个我们在Part 2会讲到)。&lt;/p&gt;
&lt;p&gt;除了异步之外，AMD的另一个优点是，你的module可以是对象，函数，构造函数，字符串，JSON以及其他类型。而CommonJS只支持对象作为module。&lt;/p&gt;
&lt;p&gt;总的来说，AMD并不兼容io，文件系统，以及其他面向server的feature，并且，封装的语法比&lt;code&gt;require&lt;/code&gt;较复杂一点。&lt;/p&gt;
&lt;h3 id=&quot;UMD&quot;&gt;&lt;a href=&quot;#UMD&quot; class=&quot;headerlink&quot; title=&quot;UMD&quot;&gt;&lt;/a&gt;UMD&lt;/h3&gt;&lt;p&gt;对于需要你同时支持AMD和CommonJS的项目，你可以选择&lt;em&gt;Universal Module Definition (UMD)&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;UMD本质上创建了一个方式，支持他们其中的一种，也支持全局变量的定义。因此，UMD module可以同时在client和server端使用。&lt;/p&gt;
&lt;p&gt;让我们来看看UMD是怎样子的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;root, factory&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; define === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt; &amp;amp;&amp;amp; define.amd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// AMD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    define([&lt;span class=&quot;string&quot;&gt;&#39;myModule&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;myOtherModule&#39;&lt;/span&gt;], factory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; exports === &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// CommonJS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = factory(&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;myModule&#39;&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;myOtherModule&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Browser globals (Note: root is window)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root.returnExports = factory(root.myModule, root.myOtherModule);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;myModule, myOtherModule&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;notHelloOrGoodbye&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// A private method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// A public method because it&#39;s returned (see below)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;goodbye&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// A public method because it&#39;s returned (see below)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Exposed public methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      hello: hello,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      goodbye: goodbye&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多关于UMD的例子，请查看 &lt;a href=&quot;https://github.com/umdjs/umd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;enlightening repo&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Native_JS&quot;&gt;&lt;a href=&quot;#Native_JS&quot; class=&quot;headerlink&quot; title=&quot;Native JS&quot;&gt;&lt;/a&gt;Native JS&lt;/h2&gt;&lt;p&gt;哈！你居然能看到这里，看来我没有搞晕你。太棒了。因为在结束之前，我们还有一个定义module的方法。&lt;/p&gt;
&lt;p&gt;如你所见，上面的方法没有一种是原生JavaScript支持的。相反，我们使用了各种各样的方式去模拟一个模块系统。&lt;/p&gt;
&lt;p&gt;幸运的是，在TC39工作的人(设计ECMAScript的语法和语义)在ES6实现了内置的模块系统。&lt;/p&gt;
&lt;p&gt;下面的资源很好地讲解了ES6的模块系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jsmodules.io/cjs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsmodules.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;exploringjs.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ES6的module结合了CommonJS和AMD的优点，比如简洁的语法和异步加载。还有优点是，比如支持循环依赖。&lt;/p&gt;
&lt;p&gt;我最喜欢的ES6 modules的feature是，&lt;em&gt;imports&lt;/em&gt;是&lt;em&gt;exports&lt;/em&gt;的&lt;strong&gt;live read-only views&lt;/strong&gt;(而CommonJS的import只是exports的一份copy而已，并且不是即时)。&lt;/p&gt;
&lt;p&gt;下面例子会讲述live read-only view是怎样子的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// lib/counter.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; counter = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;increment&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  counter++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decrement&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  counter--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  counter: counter,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  increment: increment,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  decrement: decrement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// src/main.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; counter = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;../../lib/counter&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;counter.increment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(counter.counter); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，我们创建了module的&lt;strong&gt;2份copy&lt;/strong&gt;：一个是当我们&lt;code&gt;export&lt;/code&gt;他，另一个是当我们&lt;code&gt;require&lt;/code&gt;他。&lt;/p&gt;
&lt;p&gt;并且，在&lt;code&gt;main.js&lt;/code&gt;的那份copy已经和原本的失去连接了。这就是为什么当我们给&lt;code&gt;counter&lt;/code&gt;增加时他还是&lt;code&gt;1&lt;/code&gt;——因为我们&lt;code&gt;import&lt;/code&gt;的&lt;code&gt;counter&lt;/code&gt;已经和原来的失去联系。&lt;/p&gt;
&lt;p&gt;因为，增加&lt;code&gt;counter&lt;/code&gt;会在原来的module可以实现，但是在你copy的那份就实现不了。如果想要后者实现的话，只能手动地操作了：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;counter.counter++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(counter.counter); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在另一个方面，ES6对于我们&lt;code&gt;import&lt;/code&gt;的module创建了一个&lt;strong&gt;live read-only view&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// lib/counter.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; counter = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;increment&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  counter++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decrement&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  counter--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// src/main.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; counter &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../../counter&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(counter.counter); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;counter.increment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(counter.counter); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很cool，对吧。&lt;/p&gt;
&lt;h2 id=&quot;u5411_u524D_u770B_uFF1Abunding_modules&quot;&gt;&lt;a href=&quot;#u5411_u524D_u770B_uFF1Abunding_modules&quot; class=&quot;headerlink&quot; title=&quot;向前看：bunding modules&quot;&gt;&lt;/a&gt;向前看：bunding modules&lt;/h2&gt;&lt;p&gt;哇。时间过得真快。我真的希望能够帮助你更好地理解JavaScript的modules。&lt;/p&gt;
&lt;p&gt;在下一部分，我会讲&lt;strong&gt;module bundling&lt;/strong&gt;，涉及到几个核心的主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么我们需要&lt;em&gt;module bundling&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;不同方法实现&lt;em&gt;bundling&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;ECMAScript的模块加载器API&lt;/li&gt;
&lt;li&gt;…更多…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：为了简单起见，我跳过了许多细节(比如，循环依赖)。如果我留下了很重要或者很棒的东西，请留言让我知道！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(原文：&lt;a href=&quot;https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#.4ufizwkud&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Modules: A Beginner’s Guide - Preethi Kasireddy&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;(原文：&lt;a href=&quot;https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#.4ufizwkud&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="翻译" scheme="http://drakeleung.github.io/blog/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>迷之前端轮子 - 实现 ES2015 Promise</title>
    <link href="http://drakeleung.github.io/blog/2016/02/06/Promise/"/>
    <id>http://drakeleung.github.io/blog/2016/02/06/Promise/</id>
    <published>2016-02-06T09:59:59.000Z</published>
    <updated>2016-02-06T12:58:36.959Z</updated>
    
    <content type="html">&lt;p&gt;(所有代码请查看&lt;a href=&quot;https://github.com/DrakeLeung/tiny-promise&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub tiny-promise&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;在此之前，我一直不明白 &lt;em&gt;promise&lt;/em&gt; 的workflow是怎样子的。所以在使用的时候，一直很迷惑。比如，&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; p1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;((resolve, reject) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setTimeout(() =&amp;gt; resolve(&lt;span class=&quot;string&quot;&gt;&#39;success&#39;&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p1.then(msg =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(msg))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于上面的代码，之前的我只知道&lt;code&gt;resolve&lt;/code&gt;的参数&lt;code&gt;success&lt;/code&gt;会传给&lt;code&gt;then&lt;/code&gt;的&lt;code&gt;msg&lt;/code&gt;。但是为什么呢？而且，我更没想过到底是&lt;code&gt;then&lt;/code&gt;先执行呢还是&lt;code&gt;resolve&lt;/code&gt;先执行？这有什么影响？&lt;/p&gt;
&lt;h2 id=&quot;How&quot;&gt;&lt;a href=&quot;#How&quot; class=&quot;headerlink&quot; title=&quot;How&quot;&gt;&lt;/a&gt;How&lt;/h2&gt;&lt;p&gt;那么，就让我们从零开始实现一个promise吧。&lt;/p&gt;
&lt;h3 id=&quot;Promise_Constructor&quot;&gt;&lt;a href=&quot;#Promise_Constructor&quot; class=&quot;headerlink&quot; title=&quot;Promise Constructor&quot;&gt;&lt;/a&gt;Promise Constructor&lt;/h3&gt;&lt;p&gt;根据&lt;a href=&quot;http://devdocs.io/javascript/global_objects/promise&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docs&lt;/a&gt;，&lt;code&gt;Promise&lt;/code&gt;这个构造函数只接受一个参数，且这个参数是一个&lt;code&gt;function&lt;/code&gt;。他有2个参数，分别是&lt;code&gt;resolve&lt;/code&gt;和&lt;code&gt;reject&lt;/code&gt;。&lt;br&gt;我们要在构造函数里面执行&lt;code&gt;executor&lt;/code&gt;函数，并且传2个参数给他。&lt;/p&gt;
&lt;p&gt;并且，我们构造函数还有一些property，比如他的状态，数据等&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TinyPromise&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;executor&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = promiseState.PENDING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.msg = &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.chains = [] &lt;span class=&quot;comment&quot;&gt;// 在`then()`时再讲&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  executor(resolve, reject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着，定义&lt;code&gt;resolve&lt;/code&gt;和&lt;code&gt;reject&lt;/code&gt;这2个传给&lt;code&gt;executor&lt;/code&gt;的参数&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; resolve = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; self = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (self.state !== promiseState.FULLFILLED) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// #0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.state = promiseState.FULLFILLED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.msg = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  notify(self) &lt;span class=&quot;comment&quot;&gt;// 下面再讲&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;#0&lt;/code&gt;为什么要加上&lt;code&gt;if&lt;/code&gt;判断呢？因为有可能&lt;code&gt;resolve&lt;/code&gt;并不是异步执行的，所以在调用&lt;code&gt;then()&lt;/code&gt;的时候，promise的状态已经为&lt;code&gt;fullfilled&lt;/code&gt;了，所以这个时候&lt;code&gt;value&lt;/code&gt;是&lt;code&gt;undefined&lt;/code&gt;的。你可以自己试试。&lt;/p&gt;
&lt;p&gt;到底&lt;code&gt;chains&lt;/code&gt;是什么呢？&lt;/p&gt;
&lt;h3 id=&quot;Then&quot;&gt;&lt;a href=&quot;#Then&quot; class=&quot;headerlink&quot; title=&quot;Then&quot;&gt;&lt;/a&gt;Then&lt;/h3&gt;&lt;p&gt;当调用&lt;code&gt;then&lt;/code&gt;的时候，他会返回一个promise。重复之，便形成了链(chain)。因此，我们每次都把这个promise放进&lt;code&gt;this.chains&lt;/code&gt;里面。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;then&#39;&lt;/span&gt;] = (onFullfilled, onRejected) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; o = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onFullfilled,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onRejected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  o.promise = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.constructor((resolve, reject) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(o, &amp;#123;resolve, reject&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.chains = [...this.chains, o]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// doesn&#39;t call resolve or reject in executor async-ly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state === promiseState.FULLFILLED) &lt;span class=&quot;comment&quot;&gt;// #0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resolve.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state === promiseState.REJECTED)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reject.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o.promise&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;#0&lt;/code&gt;，我们为什么需要做这个判断呢？因为在调用&lt;code&gt;then&lt;/code&gt;时，promise的状态已经不是&lt;code&gt;pending&lt;/code&gt;了。为什么？看看文本前面的&lt;em&gt;Why&lt;/em&gt;部分。&lt;/p&gt;
&lt;p&gt;注意到，我们把&lt;code&gt;then&lt;/code&gt;的2个参数，以及&lt;code&gt;executor&lt;/code&gt;的2个参数都放进了&lt;code&gt;this.chains&lt;/code&gt;里面。&lt;/p&gt;
&lt;h3 id=&quot;Notify&quot;&gt;&lt;a href=&quot;#Notify&quot; class=&quot;headerlink&quot; title=&quot;Notify&quot;&gt;&lt;/a&gt;Notify&lt;/h3&gt;&lt;p&gt;&lt;code&gt;notify&lt;/code&gt;函数的作用就是把&lt;code&gt;then&lt;/code&gt;返回的结果传递到下一个&lt;code&gt;then&lt;/code&gt;里面去。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; handleFullfill = (chain, self) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 上一个then()的success handler的返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = chain.onFullfilled(self.msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 传给下一个then()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  chain.resolve(result)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; notify = self =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  self.chains.forEach(chain =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (self.state) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; promiseState.FULLFILLED:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handleFullfill(chain, self)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; promiseState.REJECTED:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handleReject(chain, self)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Promise-resolve&quot;&gt;&lt;a href=&quot;#Promise-resolve&quot; class=&quot;headerlink&quot; title=&quot;Promise.resolve&quot;&gt;&lt;/a&gt;Promise.resolve&lt;/h3&gt;&lt;p&gt;这个方法&lt;code&gt;resolve&lt;/code&gt;其实就是&lt;code&gt;Promise&lt;/code&gt;构造函数的一个property。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defineProp(TinyPromise, &lt;span class=&quot;string&quot;&gt;&#39;resolve&#39;&lt;/span&gt;, msg =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TinyPromise((resolve, reject) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resolve(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; defineProp = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj = &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  prop,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperties(obj, prop, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      value,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      writable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      configurable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      enumerate: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    obj[prop] = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Wrap_up&quot;&gt;&lt;a href=&quot;#Wrap_up&quot; class=&quot;headerlink&quot; title=&quot;Wrap up&quot;&gt;&lt;/a&gt;Wrap up&lt;/h2&gt;&lt;p&gt;实现完以上，你就可以解决本文前面部分&lt;em&gt;Why&lt;/em&gt;的问题了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;then&lt;/code&gt;首先会执行，因为&lt;code&gt;resolve&lt;/code&gt;是异步的(&lt;code&gt;setTimeout&lt;/code&gt;里面)。这时，我们把&lt;code&gt;then&lt;/code&gt;的参数放在一个对象数组里面。等到&lt;code&gt;resolve&lt;/code&gt;调用的时候，我们再去遍历这个数组，调用&lt;code&gt;then&lt;/code&gt;的参数，并且把返回值传给下一个promise。&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;resolve&lt;/code&gt;不是异步的话，那么&lt;code&gt;resolve&lt;/code&gt;比&lt;code&gt;then&lt;/code&gt;先执行。在&lt;code&gt;then&lt;/code&gt;执行的时候，状态已经为&lt;code&gt;fullfilled&lt;/code&gt;了。因此只需要直接调用&lt;code&gt;notify&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;Cool~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;(所有代码请查看&lt;a href=&quot;https://github.com/DrakeLeung/tiny-promise&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub tiny-promise&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>迷之前端轮子 - 实现一个简单的 Virtual DOM</title>
    <link href="http://drakeleung.github.io/blog/2016/01/31/Virtual-DOM/"/>
    <id>http://drakeleung.github.io/blog/2016/01/31/Virtual-DOM/</id>
    <published>2016-01-31T05:30:49.000Z</published>
    <updated>2016-02-06T12:59:54.509Z</updated>
    
    <content type="html">&lt;p&gt;最近实现了一个简单版的&lt;a href=&quot;https://github.com/DrakeLeung/little-virtual-DOM&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Virtual DOM&lt;/a&gt;。&lt;br&gt;之所以简单，是因为并没有实现React的diff算法，不过我们还是可以了解一下Virtual DOM。&lt;/p&gt;
&lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Virtual DOM&lt;/em&gt; 其实就是用JS对象去表示DOM元素。&lt;br&gt;&lt;img src=&quot;/2016/01/31/Virtual-DOM/vdom0.png&quot; alt=&quot;vdom0.png&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;为什么要Virtual DOM呢？因为DOM的操作本身是很慢的。但更慢的是批量操作时的不当。&lt;/p&gt;
&lt;p&gt;比如，我们要添加5个&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; appendElement =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    () =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(type))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)).forEach(appendElement(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面每次生成一个&lt;code&gt;li&lt;/code&gt;就插入，这样是很慢的。正确的做法应该是先生成5个&lt;code&gt;li&lt;/code&gt;，然后再一次性把这个5个&lt;code&gt;li&lt;/code&gt;插入。这个过程，我们就可以使用Virtual DOM来实现。&lt;/p&gt;
&lt;h2 id=&quot;How&quot;&gt;&lt;a href=&quot;#How&quot; class=&quot;headerlink&quot; title=&quot;How&quot;&gt;&lt;/a&gt;How&lt;/h2&gt;&lt;p&gt;总共分4个步骤，如下图所示：&lt;br&gt;&lt;img src=&quot;/2016/01/31/Virtual-DOM/vdom2.png&quot; alt=&quot;vdom2.png&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;VNode&quot;&gt;&lt;a href=&quot;#VNode&quot; class=&quot;headerlink&quot; title=&quot;VNode&quot;&gt;&lt;/a&gt;VNode&lt;/h3&gt;&lt;p&gt;&lt;code&gt;VNode&lt;/code&gt;这个函数是用JavaScript对象来表示DOM元素，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;item1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Call Me Item 1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以表示为:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: &lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  props: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id: &lt;span class=&quot;string&quot;&gt;&#39;item1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children: [&lt;span class=&quot;string&quot;&gt;&#39;item1&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，&lt;code&gt;props&lt;/code&gt;可以是数组，&lt;code&gt;children&lt;/code&gt; 也可以放在&lt;code&gt;props&lt;/code&gt;里面。&lt;/p&gt;
&lt;h3 id=&quot;toHTML&quot;&gt;&lt;a href=&quot;#toHTML&quot; class=&quot;headerlink&quot; title=&quot;toHTML&quot;&gt;&lt;/a&gt;toHTML&lt;/h3&gt;&lt;p&gt;这个就是把&lt;code&gt;VNode&lt;/code&gt;转化成真正的DOM元素。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 大体分3步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Step 1: createElement&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; node = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Step 2: set props&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(props).forEach(prop =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.setAttribute(prop, props[prop])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Step 3: set children&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;children.forEach(VChild =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; childNode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// if text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; VChild === &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;) &amp;#123;  &lt;span class=&quot;comment&quot;&gt;// #0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    childNode = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createTextNode(VChild)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    childNode = createNode(VChild)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.appendChild(childNode)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;#0&lt;/code&gt;中，如果当前node是&lt;code&gt;string&lt;/code&gt;的话，就表明是&lt;code&gt;text&lt;/code&gt;。否则进行递归。&lt;/p&gt;
&lt;h3 id=&quot;Diff&quot;&gt;&lt;a href=&quot;#Diff&quot; class=&quot;headerlink&quot; title=&quot;Diff&quot;&gt;&lt;/a&gt;Diff&lt;/h3&gt;&lt;p&gt;&lt;code&gt;diff&lt;/code&gt;需要把新的Virtual DOM和旧的进行比较，从而得到变化的地方。&lt;br&gt;这个过程最难的了。我没用实现React的diff算法，只是对同级元素进行了比较而已。&lt;/p&gt;
&lt;p&gt;主要有不同的4种情况:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; TEXT = &lt;span class=&quot;string&quot;&gt;&#39;TEXT&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; PROPS = &lt;span class=&quot;string&quot;&gt;&#39;PROPS&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; REPLACE = &lt;span class=&quot;string&quot;&gt;&#39;REPLACE&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ADD_CHILD = &lt;span class=&quot;string&quot;&gt;&#39;ADD_CHILD&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TEXT&lt;/code&gt;: 替换旧的&lt;code&gt;text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PROPS&lt;/code&gt;: 表明&lt;code&gt;props&lt;/code&gt;可能是增加，删除或修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REPLACE&lt;/code&gt;: 替换旧的节点，包括删除的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADD_CHILD&lt;/code&gt;: 表示需要增加child&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现过程不讲述，详细看源代码(&lt;a href=&quot;https://github.com/DrakeLeung/little-virtual-DOM/blob/master/src%2Fdiff.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;diff&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&quot;Patch&quot;&gt;&lt;a href=&quot;#Patch&quot; class=&quot;headerlink&quot; title=&quot;Patch&quot;&gt;&lt;/a&gt;Patch&lt;/h3&gt;&lt;p&gt;这个过程把上个步骤得到的&lt;code&gt;diff&lt;/code&gt;来给当前的DOM节点进行操作。这个过程就是我们优化DOM操作的地方。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; applyPatch = (node, currentPatch) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (currentPatch.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; patchType.TEXT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      node.nodeValue = currentPatch.content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; patchType.PROPS:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      setProps(node, currentPatch.props)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; patchType.REPLACE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isExist(currentPatch.node)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        node.parentNode.replaceChild(toHTML(currentPatch.node), node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        node.parentNode.removeChild(node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; patchType.ADD_CHILD:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      node.appendChild(toHTML(currentPatch.node))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Wrap_up&quot;&gt;&lt;a href=&quot;#Wrap_up&quot; class=&quot;headerlink&quot; title=&quot;Wrap up&quot;&gt;&lt;/a&gt;Wrap up&lt;/h2&gt;&lt;p&gt;从实现这个简单的Virtual DOM，思路确实是打开了不少。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用JavaScript对象来表示DOM元素。之前只会直接操作DOM，没有想到可以这样玩。&lt;/li&gt;
&lt;li&gt;怎么比较2棵树的不同？只需要比较同级的元素。虽然还是不会比较children&lt;/li&gt;
&lt;li&gt;复习了DOM的一些知识。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以&lt;strong&gt;多尝试&lt;/strong&gt;不同的东西，思路会扩展不少~&lt;/p&gt;
&lt;h2 id=&quot;Resource&quot;&gt;&lt;a href=&quot;#Resource&quot; class=&quot;headerlink&quot; title=&quot;Resource&quot;&gt;&lt;/a&gt;Resource&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/sebmarkbage/fcb1b6ab493b0c77d589&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React (Virtual) DOM Terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gcanti.github.io/2014/10/29/understanding-react-and-reimplementing-it-from-scratch-part-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding-react-and-reimplementing-it-from-scratch-part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/29504639&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;怎么更好地理解虚拟DOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/livoras/blog/issues/13&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何实现一个Virtual DOM算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近实现了一个简单版的&lt;a href=&quot;https://github.com/DrakeLeung/little-virtual-DOM&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Virtual DOM&lt;/a&gt;。&lt;br&gt;之所以简单，是因为并没有实现Re
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从零开始编写一个Hexo主题</title>
    <link href="http://drakeleung.github.io/blog/2016/01/27/Write-a-Hexo-Theme-From-Strach/"/>
    <id>http://drakeleung.github.io/blog/2016/01/27/Write-a-Hexo-Theme-From-Strach/</id>
    <published>2016-01-27T14:23:29.000Z</published>
    <updated>2016-03-22T15:00:43.000Z</updated>
    
    <content type="html">&lt;p&gt;之前我也不会写，但是当我了解以下东西的时候，就可以从零开始写一个Hexo主题了。&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NodeJS / NPM&lt;/li&gt;
&lt;li&gt;模板引擎(Template Engine)，比如EJS, Jade，Handlebars等等都可以&lt;/li&gt;
&lt;li&gt;HTML / CSS / JavaScript&lt;/li&gt;
&lt;li&gt;阅读Hexo的&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;阅读Hexo默认主题&lt;a href=&quot;https://github.com/hexojs/hexo-theme-landscape&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;landscape&lt;/a&gt;的源码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上正是一名Web前端人员需要了解和掌握的东西。&lt;br&gt;&lt;strong&gt;不过，不会前端也不要紧，我告诉你以下的东西就足够了。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;NodeJS_/_NPM&quot;&gt;&lt;a href=&quot;#NodeJS_/_NPM&quot; class=&quot;headerlink&quot; title=&quot;NodeJS / NPM&quot;&gt;&lt;/a&gt;NodeJS / NPM&lt;/h2&gt;&lt;p&gt;首先，Hexo是由NodeJS来编写的。编写一个应用是需要第三方包(依赖/库)，这个就是我们的&lt;code&gt;package.json&lt;/code&gt;文件的由来。这些package怎么下载的呢？答案就是通过&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NPM&lt;/a&gt;(Node Package Manager)，然后他们都会安装在&lt;code&gt;node_modules/&lt;/code&gt;这个文件夹里面。&lt;/p&gt;
&lt;p&gt;OK，这就是我们需要知道的NodeJS和NPM的知识。&lt;/p&gt;
&lt;h2 id=&quot;Hexo_u7684Workflow&quot;&gt;&lt;a href=&quot;#Hexo_u7684Workflow&quot; class=&quot;headerlink&quot; title=&quot;Hexo的Workflow&quot;&gt;&lt;/a&gt;Hexo的Workflow&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;下面是重点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hexo会读取根目录下的&lt;code&gt;_config.yml&lt;/code&gt;里面的&lt;code&gt;theme&lt;/code&gt;属性, 从而采用对应的主题。而主题都是放在&lt;code&gt;themes/&lt;/code&gt;目录下面的，然后你会发现他里面有个&lt;code&gt;landscape&lt;/code&gt;的目录，这个就是默认主题啦。&lt;/p&gt;

&lt;p&gt;接着，我们查看&lt;code&gt;themes/landscape/&lt;/code&gt;目录，以及根据文档&lt;a href=&quot;https://hexo.io/docs/themes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docs-themes&lt;/a&gt;，我们很容易得出：一个主题其实由4部分组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_config.yml&lt;/code&gt;: 主题的配置文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source/&lt;/code&gt;: 放我们的CSS文件以及图片&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layout/&lt;/code&gt;: 模板文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scripts&lt;/code&gt;: 放JavaScript文件，他们会自动加载&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后，根据文档&lt;a href=&quot;https://hexo.io/docs/templates.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docs-templates&lt;/a&gt;，不难得出：&lt;/p&gt;
&lt;p&gt;每次当我们在浏览器访问时，Hexo都会去解析&lt;code&gt;sources&lt;/code&gt;目录下对应的模板文件。不同的URL对应不同的文件，所以才有了不同的页面。那么，我们怎么知道哪个URL对应哪个页面呢？(下面我们以&lt;code&gt;EJS&lt;/code&gt;为例)&lt;/p&gt;
&lt;p&gt;无论URL是什么，Hexo先读取&lt;code&gt;layout.ejs&lt;/code&gt;，然后里面的&lt;a href=&quot;https://github.com/hexojs/hexo-theme-landscape/blob/master/layout%2Flayout.ejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;body&lt;/a&gt;变量会替换成以下内容：(&lt;em&gt;Fallback&lt;/em&gt;的意思是如果访问&lt;code&gt;/archives&lt;/code&gt;时，我们的&lt;code&gt;archives.ejs&lt;/code&gt;不存在的话，就会返回&lt;code&gt;index.ejs&lt;/code&gt;)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;Template&lt;/th&gt;
&lt;th&gt;Fallback&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;index.ejs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/archives&lt;/td&gt;
&lt;td&gt;archive.ejs&lt;/td&gt;
&lt;td&gt;index.ejs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文章&lt;/td&gt;
&lt;td&gt;post.ejs&lt;/td&gt;
&lt;td&gt;index.ejs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如下图所示:&lt;br&gt;&lt;/p&gt;
&lt;p&gt;或者，可以先尝试一下没有&lt;code&gt;layout.ejs&lt;/code&gt;的情况，因为比较简单。也就是，访问&lt;code&gt;/&lt;/code&gt;，Hexo就返回&lt;code&gt;index.ejs&lt;/code&gt;里面的东西给你。访问&lt;code&gt;/archives&lt;/code&gt;就返回&lt;code&gt;archive.ejs&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;u6A21_u677F_u6587_u4EF6&quot;&gt;&lt;a href=&quot;#u6A21_u677F_u6587_u4EF6&quot; class=&quot;headerlink&quot; title=&quot;模板文件&quot;&gt;&lt;/a&gt;模板文件&lt;/h2&gt;&lt;p&gt;那么，接下来就要编写我们的模板文件了。怎么写呢？&lt;br&gt;比如我的根目录想显示所有的文章？我们就要使用Hexo提供的&lt;a href=&quot;https://hexo.io/docs/variables.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;变量&lt;/a&gt;了。通过文档，我们可以得出&lt;code&gt;page.posts&lt;/code&gt;这个变量就包含了所有的文章。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;page.posts.each&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;post&lt;/span&gt;)&amp;#123; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;article&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt; post.title &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; post.content &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;article&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;%&lt;/span&gt; &amp;#125;) %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编写模板文件的时候，我们可能利用Hexo内置的一些&lt;a href=&quot;https://hexo.io/docs/helpers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;helper&lt;/a&gt;来方便开发，比如分页使用&lt;a href=&quot;https://hexo.io/docs/helpers.html#paginator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;paginator&lt;/a&gt;，路径处理使用&lt;a href=&quot;https://hexo.io/docs/helpers.html#url_for&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;url_for&lt;/a&gt;等。&lt;/p&gt;
&lt;h2 id=&quot;u6837_u5F0F&quot;&gt;&lt;a href=&quot;#u6837_u5F0F&quot; class=&quot;headerlink&quot; title=&quot;样式&quot;&gt;&lt;/a&gt;样式&lt;/h2&gt;&lt;p&gt;我们的CSS文件是放在&lt;code&gt;source&lt;/code&gt;里面的，然后要怎么加载呢？这个时候，我们就需要在模板文件里面引入，比如我们的首页需要&lt;code&gt;app.css&lt;/code&gt;，那么就在&lt;code&gt;index.ejs&lt;/code&gt;里面引用就行了。如果每个页面都用到的话，就放在&lt;code&gt;layout.ejs&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;%-&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;css&lt;/span&gt;(&#39;&lt;span class=&quot;attribute&quot;&gt;path&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;to&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;app&lt;/span&gt;&#39;) %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，你也可以使用预处理器来写样式，比如Sass，Stylus等等。此时，你就要下载对应的package来解释成CSS。比如，我使用的是Sass，那么我就要&lt;code&gt;npm i --save hexo-renderer-sass&lt;/code&gt;来把&lt;code&gt;.scss&lt;/code&gt;文件解释成&lt;code&gt;.css&lt;/code&gt;文件。&lt;/p&gt;
&lt;h2 id=&quot;u603B_u7ED3_u4E00_u4E0B&quot;&gt;&lt;a href=&quot;#u603B_u7ED3_u4E00_u4E0B&quot; class=&quot;headerlink&quot; title=&quot;总结一下&quot;&gt;&lt;/a&gt;总结一下&lt;/h2&gt;&lt;p&gt;如果遇到问题的话，查看Hexo默认主题&lt;a href=&quot;https://github.com/hexojs/hexo-theme-landscape&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;landscape&lt;/a&gt;的源码以及&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;就能解决了。&lt;br&gt;最后卖下广告，这是我写的主题：&lt;a href=&quot;https://github.com/DrakeLeung/hexo-theme-again&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-again&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前我也不会写，但是当我了解以下东西的时候，就可以从零开始写一个Hexo主题了。&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NodeJS / NPM&lt;/li&gt;
&lt;li&gt;模板引擎(Template Engine)，比如EJS, Jade，Handlebars等等都可以&lt;/li&gt;
&lt;l
    
    </summary>
    
    
      <category term="hexo" scheme="http://drakeleung.github.io/blog/tags/hexo/"/>
    
      <category term="theme" scheme="http://drakeleung.github.io/blog/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>5 Ways To Make A Sticky Footer</title>
    <link href="http://drakeleung.github.io/blog/2016/01/20/5-Ways-to-Make-a-Sticky-Footer/"/>
    <id>http://drakeleung.github.io/blog/2016/01/20/5-Ways-to-Make-a-Sticky-Footer/</id>
    <published>2016-01-20T07:19:06.000Z</published>
    <updated>2016-01-27T07:20:56.285Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;Sticky Footer&lt;/em&gt;在内容展示的网站都会用到。比如blog，xx的主页等等。&lt;/p&gt;
&lt;h2 id=&quot;What_is_Sticky_Footer&quot;&gt;&lt;a href=&quot;#What_is_Sticky_Footer&quot; class=&quot;headerlink&quot; title=&quot;What is Sticky Footer&quot;&gt;&lt;/a&gt;What is Sticky Footer&lt;/h2&gt;&lt;p&gt;为了简单起见，我们不妨假设我们的&lt;code&gt;index.html&lt;/code&gt;是这样的:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Ways to make a sticky foote&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么，如下面的图所示，图&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;都不是&lt;em&gt;Sticky Footer&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7f85b91egw1f0asb7siypj20go088q4x.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为图&lt;code&gt;a&lt;/code&gt;的页脚的后面还有空白部分。我们想要的应该是页脚就是在页面的最底部。&lt;/p&gt;
&lt;p&gt;那么图&lt;code&gt;b&lt;/code&gt;为什么不是呢？他不是在页面的最底部吗？没错，但是我们想要的是只有当&lt;strong&gt;scroller bar&lt;/strong&gt;滑到最底部的时候，才会出现页脚。&lt;/p&gt;
&lt;p&gt;像下面的图&lt;code&gt;c&lt;/code&gt;和&lt;code&gt;d&lt;/code&gt;才是我们的&lt;em&gt;Sticky Footer&lt;/em&gt;:&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7f85b91egw1f0asq75p07j20gl09i0vh.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Ways_to_Sticky_Footer&quot;&gt;&lt;a href=&quot;#Ways_to_Sticky_Footer&quot; class=&quot;headerlink&quot; title=&quot;Ways to Sticky Footer&quot;&gt;&lt;/a&gt;Ways to Sticky Footer&lt;/h2&gt;&lt;p&gt;废话少说，下面会介绍几种创建&lt;em&gt;Sticky Footer&lt;/em&gt;的方法。&lt;/p&gt;
&lt;p&gt;我们会从最简单的方法开始，但最简单的不一定是最好的，符合自己的使用场景才是最好的。最后总结每种方法的优缺点。&lt;/p&gt;
&lt;p&gt;(P.S. 假设我们都使用上面的&lt;code&gt;index.html&lt;/code&gt;所示结构)&lt;/p&gt;
&lt;h3 id=&quot;Flexbox&quot;&gt;&lt;a href=&quot;#Flexbox&quot; class=&quot;headerlink&quot; title=&quot;Flexbox&quot;&gt;&lt;/a&gt;Flexbox&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;方法来源&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* #0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; flex&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;flex-direction&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; column&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100vh&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* #1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;#0&lt;/code&gt;是中的&lt;code&gt;min-height: 100vh&lt;/code&gt;是为了让&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;的高度没有大于屏幕的高度时，使得&lt;code&gt;footer&lt;/code&gt;可以在页面的底部。而，&lt;code&gt;margin: 0&lt;/code&gt;是去掉原本浏览器自带的&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;的样式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#1&lt;/code&gt;的&lt;code&gt;flex: 1&lt;/code&gt;是为了让&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;占满多余的空间。&lt;/p&gt;
&lt;h3 id=&quot;Modern_Way&quot;&gt;&lt;a href=&quot;#Modern_Way&quot; class=&quot;headerlink&quot; title=&quot;Modern Way&quot;&gt;&lt;/a&gt;Modern Way&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://mystrd.at/modern-clean-css-sticky-footer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;方法来源&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* #0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* #1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* same to footer height */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* #2 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;#0&lt;/code&gt;中的&lt;code&gt;position: relative&lt;/code&gt;很显然是为了让&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;变成&lt;em&gt;containning block&lt;/em&gt;，&lt;br&gt;这个在&lt;code&gt;#2&lt;/code&gt;会说到。同样地，&lt;code&gt;min-height: 100%&lt;/code&gt;和上面的&lt;em&gt;flexbox&lt;/em&gt;方法中的&lt;code&gt;#0&lt;/code&gt;一样。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#1&lt;/code&gt;的&lt;code&gt;margin-bottom&lt;/code&gt;设为&lt;code&gt;100px&lt;/code&gt;是和&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;的高度一样的。目的是当&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;的内容溢出&lt;br&gt;的时候，防止&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;的内容蹿到&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;里面。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#2&lt;/code&gt;设置了&lt;code&gt;position: absolute&lt;/code&gt;，这样，&lt;code&gt;left&lt;/code&gt;和&lt;code&gt;bottom&lt;/code&gt;的值都是相对于&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;的&lt;em&gt;containning block&lt;/em&gt;来说的。&lt;br&gt;由于在&lt;code&gt;#0&lt;/code&gt;设置了&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;的&lt;code&gt;position&lt;/code&gt;为&lt;code&gt;relative&lt;/code&gt;，所以&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;就是&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;的&lt;em&gt;containning block&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Table_Way&quot;&gt;&lt;a href=&quot;#Table_Way&quot; class=&quot;headerlink&quot; title=&quot;Table Way&quot;&gt;&lt;/a&gt;Table Way&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://codepen.io/anon/pen/zrRLVW&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;方法来源&lt;/a&gt;或者&lt;a href=&quot;https://gist.github.com/goldsky/7322156&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;html&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; table&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* #0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;main&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; table-row&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* #1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* #2 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实这个方法就是利用了&lt;code&gt;table&lt;/code&gt;布局，然后设置&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;的高度为&lt;code&gt;1px&lt;/code&gt;(如&lt;code&gt;#2&lt;/code&gt;所示)。但是我并不知道为什么。&lt;br&gt;并且，如果我把&lt;code&gt;#2&lt;/code&gt;注释掉，把&lt;code&gt;#1&lt;/code&gt;的注释去掉，也是work的。所以不知道设置&lt;code&gt;1px&lt;/code&gt;有什么用。&lt;/p&gt;
&lt;h3 id=&quot;Old_Way&quot;&gt;&lt;a href=&quot;#Old_Way&quot; class=&quot;headerlink&quot; title=&quot;Old Way&quot;&gt;&lt;/a&gt;Old Way&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://ryanfait.com/resources/footer-stick-to-bottom-of-page/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;方法来源&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这种方法需要我们改变一下我们的&lt;code&gt;index.html&lt;/code&gt;，给我们的&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;添加一个空白的&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;。&lt;br&gt;他其实是&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;的&lt;em&gt;placeholder&lt;/em&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Ways to make a sticky foote&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;push&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- new --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么，对应的CSS是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* #0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;footer&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.push&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* #1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;#0&lt;/code&gt;给&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;设置了&lt;code&gt;margin-bottom: -100px&lt;/code&gt;。这是&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;的高度的相反数。&lt;br&gt;他是为了让&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;可以蹿到&lt;code&gt;&amp;lt;div class=&amp;quot;push&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;的位置。&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;.push&lt;/code&gt;就是&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;的placeholder, 显然他们的&lt;code&gt;height&lt;/code&gt;必须是一样的，如&lt;code&gt;#1&lt;/code&gt;所示。&lt;/p&gt;
&lt;p&gt;其实我们还可以使用为了&lt;code&gt;:after&lt;/code&gt;改进一下。因为&lt;code&gt;.push&lt;/code&gt;存在的意义只是为了样式而样式，并不是页面的结构，所以也没有必要出现在&lt;code&gt;index.html&lt;/code&gt;里面。因此，我们有了下面的&lt;em&gt;Old Way Plus&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Old_Way_Plus&quot;&gt;&lt;a href=&quot;#Old_Way_Plus&quot; class=&quot;headerlink&quot; title=&quot;Old Way Plus&quot;&gt;&lt;/a&gt;Old Way Plus&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://css-tricks.com/snippets/css/sticky-footer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;方法来源&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(注意，这个时候我们并不需要给&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;添加一个&lt;code&gt;&amp;lt;div class=&amp;quot;push&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* equal to footer height */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* #0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; block&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;#0&lt;/code&gt;, 我们利用伪类&lt;code&gt;:after&lt;/code&gt;来替代上面的&lt;em&gt;Old Way&lt;/em&gt;的&lt;code&gt;.push&lt;/code&gt;，这样就不需要给&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;添加不必要的标签。&lt;/p&gt;
&lt;h2 id=&quot;To_Sum_Up&quot;&gt;&lt;a href=&quot;#To_Sum_Up&quot; class=&quot;headerlink&quot; title=&quot;To Sum Up&quot;&gt;&lt;/a&gt;To Sum Up&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;难度&lt;/th&gt;
&lt;th&gt;Footer需要固定高度&lt;/th&gt;
&lt;th&gt;浏览器兼容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Flexbox&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Modern way&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Table way&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;++?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Old way&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Old way Plus&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Sticky Footer&lt;/em&gt;在内容展示的网站都会用到。比如blog，xx的主页等等。&lt;/p&gt;
&lt;h2 id=&quot;What_is_Sticky_Footer&quot;&gt;&lt;a href=&quot;#What_is_Sticky_Footer&quot; class=&quot;headerlink&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BFC in CSS(0) - WTF</title>
    <link href="http://drakeleung.github.io/blog/2015/07/25/BFC-in-CSS-0-WTF/"/>
    <id>http://drakeleung.github.io/blog/2015/07/25/BFC-in-CSS-0-WTF/</id>
    <published>2015-07-24T17:21:40.000Z</published>
    <updated>2016-01-27T06:26:38.744Z</updated>
    
    <content type="html">&lt;p&gt;看了&lt;a href=&quot;http://www.sitepoint.com/understanding-block-formatting-contexts-in-css/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding Block Formatting Contexts in CSS&lt;/a&gt;这篇文章，终于有点明白什么是BFC(Block Formatting Context)了。&lt;/p&gt;
&lt;h2 id=&quot;Normal_Flow&quot;&gt;&lt;a href=&quot;#Normal_Flow&quot; class=&quot;headerlink&quot; title=&quot;Normal Flow&quot;&gt;&lt;/a&gt;Normal Flow&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;下面这句话不要忽略啊。要不然很多事情就想不通&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Boxes in the normal flow belong to a formatting context, which may be block or inline, but not both simultaneously. Block-level boxes participate in a block formatting context. Inline-level boxes participate in an inline formatting context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在normal flow中的盒子都是属于formatting context的！！什么意思？&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; I am in the formatting context&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; I also belong to the formatting context&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子，&lt;code&gt;p&lt;/code&gt;和&lt;code&gt;div&lt;/code&gt;都是在&lt;em&gt;normal flow&lt;/em&gt;里面的。并且，他们都是块级元素，所以他们参与了block formatting contexts。&lt;/p&gt;
&lt;p&gt;那么，参与了BFC又会怎么样呢？&lt;/p&gt;
&lt;h2 id=&quot;Block_Formatting_Contexts&quot;&gt;&lt;a href=&quot;#Block_Formatting_Contexts&quot; class=&quot;headerlink&quot; title=&quot;Block Formatting Contexts&quot;&gt;&lt;/a&gt;Block Formatting Contexts&lt;/h2&gt;&lt;p&gt;下面的&lt;a href=&quot;http://www.w3.org/TR/CSS21/visuren.html#block-formatting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;定义了&lt;em&gt;在BFC中盒子是怎么排版的&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the ‘margin’ properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在BFC中，盒子都是按垂直方向一个挨着一个排版的，从&lt;em&gt;containing block&lt;/em&gt;的顶部开始。2个sibing boxed的&lt;br&gt;垂直方向的距离是由&lt;code&gt;margin&lt;/code&gt;来决定的，但此时的2个盒子的&lt;code&gt;margin&lt;/code&gt;是会&lt;strong&gt;collapse&lt;/strong&gt;(坍塌？折叠？)&lt;/p&gt;
&lt;p&gt;那到底是怎么collapse法，我们要怎样才能解决。&lt;/p&gt;
&lt;h2 id=&quot;BFC_u5F15_u8D77_u7684Collapse_Margins&quot;&gt;&lt;a href=&quot;#BFC_u5F15_u8D77_u7684Collapse_Margins&quot; class=&quot;headerlink&quot; title=&quot;BFC引起的Collapse Margins&quot;&gt;&lt;/a&gt;BFC引起的Collapse Margins&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; lightgreen&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; Sibling 1 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; Sibling 2 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的例子中，2个&lt;code&gt;p&lt;/code&gt;的之间的&lt;code&gt;margin&lt;/code&gt;只有&lt;code&gt;10px&lt;/code&gt;而不是&lt;code&gt;20px(10 + 10)&lt;/code&gt;。为什么？因为前面说过，&lt;/p&gt;
&lt;p&gt;2个&lt;code&gt;p&lt;/code&gt;都是在&lt;em&gt;normal flow&lt;/em&gt;中，并且，他们是块级元素，所以他们会参与block formatting contexts。&lt;/p&gt;
&lt;p&gt;又因为在BFC中，2个sibling element的垂直方面的&lt;code&gt;margin&lt;/code&gt;会collapse！于是，结果取2者较大的那个。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:last-child&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样一来，2个&lt;code&gt;p&lt;/code&gt;垂直方向的&lt;code&gt;margin&lt;/code&gt;就取&lt;code&gt;20&lt;/code&gt;。因为20比10大。&lt;/p&gt;
&lt;p&gt;那么，我们如何解决margin collapse呢？答案就是&lt;strong&gt;创建一个新的bfc&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为什么可以？因为前面的文档说过: &lt;em&gt;In a block formatting….&lt;/em&gt;才会发生margin collapse。&lt;br&gt;也就是说，如果&lt;strong&gt;不在同一个bfc&lt;/strong&gt;的话，那么就不会有margin collapse。因此，我们创建新的bfc就行了。&lt;/p&gt;
&lt;p&gt;那么，怎样才能创建新的bfc呢？&lt;/p&gt;
&lt;h2 id=&quot;Create_a_New_BFC&quot;&gt;&lt;a href=&quot;#Create_a_New_BFC&quot; class=&quot;headerlink&quot; title=&quot;Create a New BFC&quot;&gt;&lt;/a&gt;Create a New BFC&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Floats, absolutely positioned elements, block containers (such as inline-blocks, table-cells, and table-captions) that are not block boxes, and block boxes with ‘overflow’ other than ‘visible’ (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过上面的&lt;a href=&quot;http://www.w3.org/TR/CSS21/visuren.html#block-formatting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;，我们可以总结出以下的情况会创建出新的BFC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;的值不为&lt;code&gt;none&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt;的值不为&lt;code&gt;static&lt;/code&gt;或者&lt;code&gt;relative&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display&lt;/code&gt;的值为&lt;code&gt;table-cell&lt;/code&gt;, &lt;code&gt;table-caption&lt;/code&gt;, &lt;code&gt;inline-block&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;overflow&lt;/code&gt;的值不为&lt;code&gt;visible&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;.newBFC&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; hidden&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;newBFC&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;I am in the BFC created by my parent tag&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面例子中的&lt;code&gt;div&lt;/code&gt;就创建了一个新的bfc。&lt;/p&gt;
&lt;p&gt;所以，我们就可以解决margin collapse:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; lightgreen&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;.newBFC&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; hidden&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; Sibling 1 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;newBFC&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; Sibling 2 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Wrap_up&quot;&gt;&lt;a href=&quot;#Wrap_up&quot; class=&quot;headerlink&quot; title=&quot;Wrap up&quot;&gt;&lt;/a&gt;Wrap up&lt;/h2&gt;&lt;p&gt;总的来说，BFC就是定义了块级元素是如何排版的。&lt;/p&gt;
&lt;p&gt;另外，创建新的BFC可以解决一些问题。比如上面的&lt;em&gt;margin collapse&lt;/em&gt;，还有更多的例子，我们下篇再说。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;看了&lt;a href=&quot;http://www.sitepoint.com/understanding-block-formatting-contexts-in-css/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding Block F
    
    </summary>
    
      <category term="CSS" scheme="http://drakeleung.github.io/blog/categories/CSS/"/>
    
    
      <category term="BFC" scheme="http://drakeleung.github.io/blog/tags/BFC/"/>
    
  </entry>
  
  <entry>
    <title>Scope(3)-What Is Closure</title>
    <link href="http://drakeleung.github.io/blog/2015/07/19/Scope-3-What-Is-Closure/"/>
    <id>http://drakeleung.github.io/blog/2015/07/19/Scope-3-What-Is-Closure/</id>
    <published>2015-07-18T17:58:31.000Z</published>
    <updated>2016-01-27T06:27:20.969Z</updated>
    
    <content type="html">&lt;h2 id=&quot;What_is_Closure&quot;&gt;&lt;a href=&quot;#What_is_Closure&quot; class=&quot;headerlink&quot; title=&quot;What is Closure&quot;&gt;&lt;/a&gt;What is Closure&lt;/h2&gt;&lt;p&gt;什么是闭包呢？我们来下个定义吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包就是函数可以访问他的lexical scope，即使他是在他的lexical scope外面执行的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看个例子压压惊。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(); &lt;span class=&quot;comment&quot;&gt;// 42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很自然而然地，上面例子输出的结果就是&lt;code&gt;42&lt;/code&gt;。为什么呢？这其实就是作用域链的问题而已。&lt;br&gt;&lt;code&gt;bar&lt;/code&gt;函数要引用到&lt;code&gt;x&lt;/code&gt;这个变量的值。于是就在自己的作用域找，找不到。于是向上找，然后在&lt;code&gt;foo&lt;/code&gt;函数的作用域就找到了。&lt;/p&gt;
&lt;p&gt;很显然，上面的例子是符合我们对闭包定义的前半部分，&lt;strong&gt;但是后半部分是不符合的&lt;/strong&gt;。因为&lt;code&gt;bar&lt;/code&gt;的lexical scope就是&lt;code&gt;foo&lt;/code&gt;的作用域，而&lt;code&gt;bar&lt;/code&gt;就是在&lt;code&gt;foo&lt;/code&gt;的作用域里面被调用的。&lt;/p&gt;
&lt;h2 id=&quot;How_it_Works&quot;&gt;&lt;a href=&quot;#How_it_Works&quot; class=&quot;headerlink&quot; title=&quot;How it Works&quot;&gt;&lt;/a&gt;How it Works&lt;/h2&gt;&lt;p&gt;既然这样，我们就想办法让&lt;code&gt;bar&lt;/code&gt;在&lt;code&gt;foo&lt;/code&gt;的作用域外面执行。比如使用&lt;code&gt;return&lt;/code&gt;.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baz = foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子中，其实&lt;code&gt;baz&lt;/code&gt;就是&lt;code&gt;bar&lt;/code&gt;，只是名字换了而已，内容还是没有改变的。那么好，现在，&lt;code&gt;bar&lt;/code&gt;(也就是&lt;code&gt;baz&lt;/code&gt;)并不是在他的lexical scope(&lt;code&gt;foo&lt;/code&gt;‘s scope)被调用，而是在global scope。并且，&lt;code&gt;bar&lt;/code&gt;还可以访问他的lexical scope里面的&lt;code&gt;x&lt;/code&gt;。所以，你可以说，&lt;strong&gt;这就是闭包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们再来看1个例子:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;baz&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baz(bar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样地，上面的例子中，&lt;code&gt;bar&lt;/code&gt;并没有在他的lexical scope(&lt;code&gt;foo&lt;/code&gt;‘s scope)中执行，而在是&lt;code&gt;baz&lt;/code&gt;里面执行。并且，&lt;code&gt;bar&lt;/code&gt;还是可以访问他的lexical scope。因此，这个也是闭包！&lt;/p&gt;
&lt;h2 id=&quot;More_Examples&quot;&gt;&lt;a href=&quot;#More_Examples&quot; class=&quot;headerlink&quot; title=&quot;More Examples&quot;&gt;&lt;/a&gt;More Examples&lt;/h2&gt;&lt;p&gt;其实，闭包到处都是~&lt;/p&gt;
&lt;p&gt;比如，一个定时器。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wait&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;msg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wait(&lt;span class=&quot;string&quot;&gt;&#39;I am also a closure example&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2秒钟之后，浏览器引擎就会在全局中调用&lt;code&gt;timer&lt;/code&gt;函数。也就是说，&lt;code&gt;timer&lt;/code&gt;并没有在他的lexical scope(&lt;code&gt;wait&lt;/code&gt;‘s scope)里面执行，但是他仍然可以访问&lt;code&gt;msg&lt;/code&gt;。所以，这个也是一个闭包。&lt;/p&gt;
&lt;p&gt;再比如，一个Event Handler.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;submit&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; username = &lt;span class=&quot;string&quot;&gt;&#39;Drake&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    submitBtn = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;button[type=submit]&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  submitBtn.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(username);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Loops_and_Closure&quot;&gt;&lt;a href=&quot;#Loops_and_Closure&quot; class=&quot;headerlink&quot; title=&quot;Loops and Closure&quot;&gt;&lt;/a&gt;Loops and Closure&lt;/h2&gt;&lt;p&gt;当闭包出现在循环中的时候，就会很容易出现问题。举个例子，&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面例子中，很出乎意料地输出了5个&lt;code&gt;5&lt;/code&gt;。为什么呢？原因在于:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在第一个&lt;code&gt;timer&lt;/code&gt;函数执行之前，已经有5个&lt;code&gt;timer&lt;/code&gt;函数定义好了。&lt;/li&gt;
&lt;li&gt;当第一个&lt;code&gt;timer&lt;/code&gt;执行时，他需要引用到&lt;code&gt;i&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;首先他在自己的作用域找，找不到。&lt;/li&gt;
&lt;li&gt;于是向上找，因为JavaScript并没有block scope。所以向上的话就是global scope.&lt;/li&gt;
&lt;li&gt;在global scope里面找到了&lt;code&gt;i&lt;/code&gt;。此时&lt;code&gt;i&lt;/code&gt;为&lt;code&gt;5&lt;/code&gt;（因为已经循环了5次)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;是不是觉得少了点什么？如果&lt;code&gt;timer&lt;/code&gt;在自己的作用域就可以找到&lt;code&gt;i&lt;/code&gt;的话就好咯。或者，在中间加多一层作用域，而不用去到&lt;code&gt;global scope&lt;/code&gt;里面找（因为他的&lt;code&gt;i&lt;/code&gt;一定是为&lt;code&gt;5&lt;/code&gt;的)&lt;/p&gt;
&lt;h3 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h3&gt;&lt;p&gt;第一种，&lt;code&gt;timer&lt;/code&gt;在自己的作用域就可以找到&lt;code&gt;i&lt;/code&gt;。可以利用&lt;code&gt;forEach&lt;/code&gt;等循环方法。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aArray = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aArray.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item, index, array&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二种，在中间新增一层作用域。常用的pattern就是使用IIFE。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;j&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于IIFE是立即调用的，所以每次调用的时候都传进了不同的实参。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当&lt;code&gt;timer&lt;/code&gt;要引用&lt;code&gt;i&lt;/code&gt;的时候，现在自己的作用域里面找。找不到。&lt;/li&gt;
&lt;li&gt;然后向上找，在IIFE里面找到了，也就是形参&lt;code&gt;j&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第三种利用&lt;code&gt;let&lt;/code&gt;来创建block scope.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;let&lt;/code&gt;劫持了&lt;code&gt;for&lt;/code&gt;的作用域。每次循环，都会初始化一个新的&lt;code&gt;i&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;timer&lt;/code&gt;在自己的作用域找不到&lt;code&gt;i&lt;/code&gt;,向上找，在&lt;code&gt;for&lt;/code&gt;里面找，哈，找到了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What_is_Closure&quot;&gt;&lt;a href=&quot;#What_is_Closure&quot; class=&quot;headerlink&quot; title=&quot;What is Closure&quot;&gt;&lt;/a&gt;What is Closure&lt;/h2&gt;&lt;p&gt;什么是闭包呢？我们来下个定义吧。&lt;/
    
    </summary>
    
      <category term="JavaScript" scheme="http://drakeleung.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="closure" scheme="http://drakeleung.github.io/blog/tags/closure/"/>
    
      <category term="scope" scheme="http://drakeleung.github.io/blog/tags/scope/"/>
    
  </entry>
  
  <entry>
    <title>Scope(2)-Lexical Scope &amp; Dynamical Scope</title>
    <link href="http://drakeleung.github.io/blog/2015/07/18/Scope-2-Lexical-Scope-Dynamical-Scope/"/>
    <id>http://drakeleung.github.io/blog/2015/07/18/Scope-2-Lexical-Scope-Dynamical-Scope/</id>
    <published>2015-07-18T15:52:57.000Z</published>
    <updated>2016-01-27T06:27:56.572Z</updated>
    
    <content type="html">&lt;p&gt;我们先来看一个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(); &lt;span class=&quot;comment&quot;&gt;// 42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果并没有出乎我们的意料，就是&lt;code&gt;42&lt;/code&gt;。为什么呢？&lt;code&gt;bar&lt;/code&gt;函数执行的时候，要引用到&lt;code&gt;baz&lt;/code&gt;的值，那么去哪里找？首先在自己的作用域里面找。噢，一下就找到了，原来是&lt;code&gt;42&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;上面这种就是&lt;strong&gt;lexical scope&lt;/strong&gt;(或者&lt;strong&gt;static scope&lt;/strong&gt;)。&lt;/p&gt;
&lt;h2 id=&quot;What_is_Lexical_Scope&quot;&gt;&lt;a href=&quot;#What_is_Lexical_Scope&quot; class=&quot;headerlink&quot; title=&quot;What is Lexical Scope&quot;&gt;&lt;/a&gt;What is Lexical Scope&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;lexical scope取决于函数是在哪里被定义的&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;在上面的例子中，&lt;code&gt;bar&lt;/code&gt;被定义在&lt;code&gt;foo&lt;/code&gt;里面，所以&lt;code&gt;foo&lt;/code&gt;的作用域就是&lt;code&gt;bar&lt;/code&gt;的lexical scope. 然后，&lt;code&gt;foo&lt;/code&gt;是被定义在global里面的，所以他的lexical scope就是&lt;em&gt;global scope&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;所以在lexical scope中，查找&lt;code&gt;x&lt;/code&gt;的过程如下，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们要执行&lt;code&gt;bar&lt;/code&gt;函数，他要引用&lt;code&gt;x&lt;/code&gt;的值。&lt;/li&gt;
&lt;li&gt;那么去哪里找&lt;code&gt;x&lt;/code&gt;呢？肯定是先去自己(&lt;code&gt;bar&lt;/code&gt;)的作用域找。但找不到:(&lt;/li&gt;
&lt;li&gt;接着去他的lexical scope找（也就是&lt;code&gt;foo&lt;/code&gt;的作用域), 找到了，&lt;code&gt;x&lt;/code&gt;是42.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;是不是有点是懂非懂的样子，我们再来看看dynamical scope，做一下比较就知道了。&lt;/p&gt;
&lt;h2 id=&quot;What_is_Dynamical_Scope&quot;&gt;&lt;a href=&quot;#What_is_Dynamical_Scope&quot; class=&quot;headerlink&quot; title=&quot;What is Dynamical Scope&quot;&gt;&lt;/a&gt;What is Dynamical Scope&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;dynamical Scope是取决于函数是在哪里被调用的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;看一个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(); &lt;span class=&quot;comment&quot;&gt;// 42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的例子中，由于&lt;code&gt;bar&lt;/code&gt;是在&lt;code&gt;foo&lt;/code&gt;里面被调用的，所以&lt;code&gt;bar&lt;/code&gt;的dynamical socpe就是&lt;code&gt;foo&lt;/code&gt;的作用域。而&lt;code&gt;foo&lt;/code&gt;是在global socpe里面被调用的，所以global scope是&lt;code&gt;foo&lt;/code&gt;的dynamical scope.&lt;/p&gt;
&lt;p&gt;所以在dynamical scope中，&lt;code&gt;x&lt;/code&gt;的查找过程是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt;被调用，他要引用&lt;code&gt;x&lt;/code&gt;的值。&lt;/li&gt;
&lt;li&gt;那么去哪里找&lt;code&gt;x&lt;/code&gt;呢？首先，肯定是在自己的作用域里面找，但是找不到:(&lt;/li&gt;
&lt;li&gt;看看是谁调用&lt;code&gt;bar&lt;/code&gt;的，就去那里找。OK, 是&lt;code&gt;foo&lt;/code&gt;。那么，我们就去&lt;code&gt;foo&lt;/code&gt;的作用域找。&lt;/li&gt;
&lt;li&gt;噢，找到了。&lt;code&gt;x&lt;/code&gt;是&lt;code&gt;42&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;总的来说，lexical scope是取决于函数是在哪里被定义的。而dynamical scope是取决于函数是哪里被调用的。&lt;/p&gt;
&lt;p&gt;而JavaScript的&lt;strong&gt;name resolution&lt;/strong&gt;(查找变量或者函数的过程)是采用lexical scope的。但是JavaScript的&lt;code&gt;this&lt;/code&gt;的值却跟dynamical scope很像。我们以后会再讲&lt;code&gt;this&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Resources&quot;&gt;&lt;a href=&quot;#Resources&quot; class=&quot;headerlink&quot; title=&quot;Resources&quot;&gt;&lt;/a&gt;Resources&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?DynamicScoping&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dynamical Scope&lt;/a&gt;前面的解释部分。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们先来看一个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://drakeleung.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="scope" scheme="http://drakeleung.github.io/blog/tags/scope/"/>
    
  </entry>
  
  <entry>
    <title>google chrome Devtools Overview</title>
    <link href="http://drakeleung.github.io/blog/2015/07/16/google-chrome-Devtools-Overview/"/>
    <id>http://drakeleung.github.io/blog/2015/07/16/google-chrome-Devtools-Overview/</id>
    <published>2015-07-15T17:29:29.000Z</published>
    <updated>2016-01-27T06:26:55.685Z</updated>
    
    <content type="html">&lt;p&gt;官方文档: &lt;a href=&quot;https://developer.chrome.com/devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome DevTools&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Console&quot;&gt;&lt;a href=&quot;#Console&quot; class=&quot;headerlink&quot; title=&quot;Console&quot;&gt;&lt;/a&gt;Console&lt;/h2&gt;&lt;h3 id=&quot;Basic_Operation&quot;&gt;&lt;a href=&quot;#Basic_Operation&quot; class=&quot;headerlink&quot; title=&quot;Basic Operation&quot;&gt;&lt;/a&gt;Basic Operation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开: &lt;code&gt;Ctrl + Shift + J&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shift + Enter&lt;/code&gt;可以换行，当你要写多行代码的时候。&lt;/li&gt;
&lt;li&gt;删除console history: &lt;code&gt;Ctrl + L&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;drawer: 假设你在其他tab里面，想要看到&lt;code&gt;Console&lt;/code&gt;tab的东西，就可以可以按&lt;code&gt;Esc&lt;/code&gt;来显示drawer&lt;br&gt;  &lt;img src=&quot;http://ww3.sinaimg.cn/large/7f85b91egw1eu3hckqtijj20rg0c8dj9.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Console_API&quot;&gt;&lt;a href=&quot;#Console_API&quot; class=&quot;headerlink&quot; title=&quot;Console API&quot;&gt;&lt;/a&gt;Console API&lt;/h3&gt;&lt;p&gt;在DevTools里面定义了一个全局对象&lt;code&gt;console&lt;/code&gt;。他有许多有用的API&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;打印日志: &lt;code&gt;console.log(arg1, arg2)&lt;/code&gt;。&lt;code&gt;.log()&lt;/code&gt;可以有多个参数，&lt;code&gt;console.log(&amp;#39;loved?&amp;#39;, true)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打印错误日志: &lt;code&gt;console.error()&lt;/code&gt;以及打印警告日志: &lt;code&gt;console.warn()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用CSS来style你的日志: &lt;code&gt;%c&lt;/code&gt;作为指示，第2个参数写CSS。&lt;/p&gt;
  &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;%cThis will be formatted with large, blue text&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;color: blue; font-size: x-large&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;%cBlue! %cRed!&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;color: blue;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;color: red;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就可以在console里面写一些漂亮的彩蛋了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把DOM元素格式化为JavaScript对象: &lt;code&gt;console.dir()&lt;/code&gt;, 如&lt;code&gt;console.dir(document)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测量时间: 传一个&lt;code&gt;string&lt;/code&gt;作为给&lt;code&gt;.time()&lt;/code&gt;作为开始，这个string就是time marker。结束&lt;br&gt;的话就&lt;code&gt;timeEnd(string)&lt;/code&gt;。string和前面的一样。&lt;/p&gt;
  &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&quot;Array initialize&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array= &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = array.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        array[i] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&quot;Array initialize&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Command_Line_API&quot;&gt;&lt;a href=&quot;#Command_Line_API&quot; class=&quot;headerlink&quot; title=&quot;Command Line API&quot;&gt;&lt;/a&gt;Command Line API&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自动补全: 比如输入&lt;code&gt;doc&lt;/code&gt;就会有提示。如果是单个提示时，可以使用&lt;code&gt;tab&lt;/code&gt;来补全。而多个时，按&lt;code&gt;↑&lt;/code&gt;&lt;br&gt;和&lt;code&gt;↓&lt;/code&gt;进行选择，然后按&lt;code&gt;→&lt;/code&gt;补全当前。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择元素: &lt;code&gt;$()&lt;/code&gt;是&lt;code&gt;querySelector()&lt;/code&gt;的简写，而&lt;code&gt;$$()&lt;/code&gt;是&lt;code&gt;querySelectorAll()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$0~$4&lt;/code&gt;保存了你在&lt;strong&gt;Element tab&lt;/strong&gt;里面选择过的5个元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Network&quot;&gt;&lt;a href=&quot;#Network&quot; class=&quot;headerlink&quot; title=&quot;Network&quot;&gt;&lt;/a&gt;Network&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7f85b91egw1eu3ifwyikzj20ov08i77o.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以检查你的文件路径有没有写对。&lt;/li&gt;
&lt;li&gt;直播下载网易云音乐的歌曲。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Elements&quot;&gt;&lt;a href=&quot;#Elements&quot; class=&quot;headerlink&quot; title=&quot;Elements&quot;&gt;&lt;/a&gt;Elements&lt;/h2&gt;&lt;p&gt;对着你想要审查的元素，鼠标右击 -&amp;gt; Inspect Element。或者&lt;code&gt;Ctrl + Shift + C&lt;/code&gt;.&lt;br&gt;可以随便修改删除一些标签啊，比如去掉广告浮窗，或者这样啊，&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/7f85b91egw1eu3g2gwgaij20dh0a4aaz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;color picker: 按&lt;code&gt;shift&lt;/code&gt; + click可以切换颜色的表示方法。&lt;/li&gt;
&lt;li&gt;adding new CSS rules&lt;/li&gt;
&lt;li&gt;toggle element state&lt;br&gt;  &lt;img src=&quot;http://ww4.sinaimg.cn/large/7f85b91egw1eu3gx9r0ppj20dc01r0sp.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Sources&quot;&gt;&lt;a href=&quot;#Sources&quot; class=&quot;headerlink&quot; title=&quot;Sources&quot;&gt;&lt;/a&gt;Sources&lt;/h2&gt;&lt;p&gt;Sources tab可以查看你的文件。&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/7f85b91egw1eu392veow8j20uk0rm0vv.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;debugging_JavaScript_with_breakpoints&quot;&gt;&lt;a href=&quot;#debugging_JavaScript_with_breakpoints&quot; class=&quot;headerlink&quot; title=&quot;debugging JavaScript with breakpoints&quot;&gt;&lt;/a&gt;debugging JavaScript with breakpoints&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;按&lt;code&gt;Ctrl + P&lt;/code&gt;就可以搜索我们的文件，此时会调到&lt;strong&gt;Sources tab&lt;/strong&gt;。接着&lt;code&gt;Ctrl + Shift + O&lt;/code&gt;搜索函数名, &lt;code&gt;Ctrl + G&lt;/code&gt;可以跳到任意一行，或者&lt;code&gt;Ctrl + Shift + F&lt;/code&gt;在所有文件中搜索文本。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://ww2.sinaimg.cn/large/7f85b91egw1eu3fzown0oj20lo08bwgi.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单击&lt;strong&gt;line gutter&lt;/strong&gt;就可以在该行设置一个breakpoint。然后你可以在右边的面板的&lt;strong&gt;BreakPoints&lt;/strong&gt;&lt;br&gt;找到所有设置过的breakpoint&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://ww2.sinaimg.cn/large/7f85b91egw1eu39fv8s2gj20le0cd400.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Control&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Continue&lt;/strong&gt;: 继续执行，直到下一个breakpoint&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step over&lt;/strong&gt;: 下一行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step into&lt;/strong&gt;: 跳进函数里面去&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step over&lt;/strong&gt;: 从函数里面跳出来&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Toggle breakpoints&lt;/strong&gt;: 激活/不激活breakpoints&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;查看&lt;br&gt;然后，我们就可以在&lt;strong&gt;Scope Vraibles&lt;/strong&gt;那里查看你想要的变量。如果你有一直想看的变量，&lt;br&gt;可以把他添加到&lt;strong&gt;Watch Expressions&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Saving_changes_with_workspaces&quot;&gt;&lt;a href=&quot;#Saving_changes_with_workspaces&quot; class=&quot;headerlink&quot; title=&quot;Saving changes with workspaces&quot;&gt;&lt;/a&gt;Saving changes with workspaces&lt;/h3&gt;&lt;p&gt;把文件夹添加到workspace之后，你在DevTools上面修改的东西就会同步到实际的文件&lt;br&gt;当中去。&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7f85b91egw1eu3d1b12tsj20ve0bl77g.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样一来，DevTools就相当于一个编辑器了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;官方文档: &lt;a href=&quot;https://developer.chrome.com/devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome DevTools&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Console&quot;&gt;&lt;a href=&quot;#C
    
    </summary>
    
      <category term="Tools" scheme="http://drakeleung.github.io/blog/categories/Tools/"/>
    
    
      <category term="devtools" scheme="http://drakeleung.github.io/blog/tags/devtools/"/>
    
      <category term="google chrome" scheme="http://drakeleung.github.io/blog/tags/google-chrome/"/>
    
  </entry>
  
  <entry>
    <title>Scope(1) - Nested Scope</title>
    <link href="http://drakeleung.github.io/blog/2015/07/09/Scope-1-Nested-Scope/"/>
    <id>http://drakeleung.github.io/blog/2015/07/09/Scope-1-Nested-Scope/</id>
    <published>2015-07-09T10:24:19.000Z</published>
    <updated>2016-01-27T06:27:09.049Z</updated>
    
    <content type="html">&lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;&lt;em&gt;nested scope&lt;/em&gt;就是所谓的嵌套作用域, 顾名思义就是作用域之间具有嵌套的关系.&lt;br&gt;那么, 为什么我们需要的nested scope呢?&lt;/p&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;我们做出一下的假设:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从头到尾只有一个socpe, 没有什么多个, 也没有什么嵌套关系.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样的话, 我们所有的变量声明, 函数声明都会放到这个&lt;strong&gt;唯一的scope&lt;/strong&gt;里面去. 那么, 当数量变大的时候, 程序的性能就会降低. 比如我们要在茫茫变量中找出一个小小的变量, 这性能不就降低了吗?&lt;/p&gt;
&lt;p&gt;为了改进他, 我们又做出了以下的假设:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实不止一个socpe, 可以有多个scope. 但是scope之间美柚嵌套关系.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很容易看出, 这次的假设比第一次的好多了. 但是问题又来了, 如果2个scope所存放的变量有很多是相同的, 既然是相同的, 那么我们很容易就想到要&lt;strong&gt;复用&lt;/strong&gt;他们. 怎么复用呢? 这个时候, 我们就给这些需要复用的scope加上一次嵌套关系:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;外部的scope嵌套着内部的scope, 内部的scope可以使用外部的scope的变量, 但反之不行!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样以来, 我们就可以不同scope之间就可以共用相同的变量. 这是极好的~&lt;br&gt;但是, 我们要怎样才可以创建出多个scope呢?&lt;/p&gt;
&lt;h2 id=&quot;How&quot;&gt;&lt;a href=&quot;#How&quot; class=&quot;headerlink&quot; title=&quot;How&quot;&gt;&lt;/a&gt;How&lt;/h2&gt;&lt;p&gt;在JavaScript中, 有3种不同的scope. 分别是&lt;strong&gt;global scope&lt;/strong&gt;, &lt;strong&gt;block scope&lt;/strong&gt;以及&lt;strong&gt;function scope&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Global_Scope&quot;&gt;&lt;a href=&quot;#Global_Scope&quot; class=&quot;headerlink&quot; title=&quot;Global Scope&quot;&gt;&lt;/a&gt;Global Scope&lt;/h3&gt;&lt;p&gt;global scope(全局作用域)是不需要创建的, 只要你执行JavaScript文件的话, 他就被自动创建.&lt;/p&gt;
&lt;p&gt;他是最外层的scope. 也就是说, 他可以嵌套其他作用域, 不可以被其他scope嵌套.&lt;/p&gt;
&lt;p&gt;在浏览器环境下, global scope可以看做为&lt;code&gt;window&lt;/code&gt;这个对象.&lt;/p&gt;
&lt;h3 id=&quot;Block_Scope&quot;&gt;&lt;a href=&quot;#Block_Scope&quot; class=&quot;headerlink&quot; title=&quot;Block Scope&quot;&gt;&lt;/a&gt;Block Scope&lt;/h3&gt;&lt;p&gt;block scope(块级作用域)指的是用&lt;code&gt;{}&lt;/code&gt;(大括号)创建一个scope. 也就是说, &lt;code&gt;{}&lt;/code&gt;内的变量定义和声明都是属于这个&lt;code&gt;{}&lt;/code&gt;所创建的scope.&lt;/p&gt;
&lt;p&gt;在ES6中, 我们可以使用&lt;code&gt;let&lt;/code&gt;这个keyword来实现&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; foo = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo); &lt;span class=&quot;comment&quot;&gt;// Reference Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是, 在ES6之前呢? 我们要怎样才能创建一个block scope呢? 一个trick就是使用&lt;code&gt;try-catch&lt;/code&gt;.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (foo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo);  &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子中, &lt;code&gt;foo&lt;/code&gt;这个keyword只能在&lt;code&gt;catch&lt;/code&gt;块里面使用. 但是, 这种写法也太丑了. 因此, 在ES6之前可以说是没有block scope的.&lt;/p&gt;
&lt;h2 id=&quot;Function_Scope&quot;&gt;&lt;a href=&quot;#Function_Scope&quot; class=&quot;headerlink&quot; title=&quot;Function Scope&quot;&gt;&lt;/a&gt;Function Scope&lt;/h2&gt;&lt;p&gt;当执行一个函数的时候, 就会创建一个属于这个函数的作用域. 当执行完这个函数之后, 理论上这个作用域是会被垃圾回收器回收的.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的例子中, 一个有3个scope. 分别是global scope &amp;gt; foo &amp;gt; bar(&lt;code&gt;&amp;gt;&lt;/code&gt;表示嵌套关系).&lt;br&gt;Engine和各个scope之间的对话.&lt;/p&gt;
&lt;p&gt;Engine: 你好&lt;code&gt;bar scope&lt;/code&gt;, 我想要一个&lt;code&gt;a&lt;/code&gt;的RHS, 请问你有吗?&lt;br&gt;bar scope: 不好意思, 我没有. 你可以去问问我的外层作用域foo scope.&lt;br&gt;Engine: 你好&lt;code&gt;foo scope&lt;/code&gt;, 请问你有见过&lt;code&gt;a&lt;/code&gt;吗?&lt;br&gt;foo scope: 当然! 这就给你.&lt;br&gt;Engine: 那太好了. 既然找到的话, 我就不需要再向上层的作用域找了.  &lt;/p&gt;
&lt;p&gt;从上面的对话中, 我们可以很容易知道: 当要查找一个变量的时候, 首先会在当前所在的作用域寻找, 如果没有找到的话, 就向上找, 直到global scope. 这个过程其实就叫做&lt;strong&gt;identifier resolution&lt;/strong&gt;(或者identifier look-up).&lt;/p&gt;
&lt;p&gt;接下来, 我们再来优化一下上面的例子. 例子中的&lt;code&gt;bar&lt;/code&gt;函数只是为了打印一个&lt;code&gt;a&lt;/code&gt;, 我们以后再也不会引用到&lt;code&gt;bar&lt;/code&gt;这个变量名. 但这个变量却污染了foo scope. 有没有办法既可以打印&lt;code&gt;a&lt;/code&gt;又可以不创建一个变量名呢? 答案就是利用&lt;strong&gt;IIFE&lt;/strong&gt;(Immediately invoked function express).&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先, 用&lt;code&gt;()&lt;/code&gt;包住整个function body就表明了这个是一个expression, 接着用&lt;code&gt;()&lt;/code&gt;来调用这个function expression.&lt;br&gt;对于IIFE还有其他写法, 你可以选择自己喜欢的口味~&lt;/p&gt;
&lt;p&gt;IIFE是很常见的, 因为他在调用一个函数的同时也&lt;strong&gt;避免了作用域的污染&lt;/strong&gt;. 这是非常值得我们学习的.&lt;/p&gt;
&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;总的来说, nested scope是为了可以共用作用域而产生的, 也就是说内部的scope可以访问外部scope. 而JavaScript有3种作用域global scope, block scope以及function scope. 其中, function scope是最主要的, 并且要懂得其中的IIFE.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;&lt;em&gt;nested scope&lt;/em&gt;就是所谓的嵌套作用域, 顾名思义就是作用域之间具有嵌套的关系.&lt;br&gt;那么, 为什
    
    </summary>
    
      <category term="JavaScript" scheme="http://drakeleung.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="scope" scheme="http://drakeleung.github.io/blog/tags/scope/"/>
    
      <category term="作用域" scheme="http://drakeleung.github.io/blog/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Scope(0) - What Is Scope</title>
    <link href="http://drakeleung.github.io/blog/2015/07/06/Scope-0-What-Is-Scope/"/>
    <id>http://drakeleung.github.io/blog/2015/07/06/Scope-0-What-Is-Scope/</id>
    <published>2015-07-06T06:51:18.000Z</published>
    <updated>2016-01-27T06:26:27.662Z</updated>
    
    <content type="html">&lt;p&gt;下面我们会学习JavaScript的scope，也就是作用域．其实很简单~&lt;br&gt;在讲什么是scope之前，我们先讲讲为什么会有scope的存在．&lt;/p&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;我们都知道，一个程序最基本的功能就是对数据的基本操作，比如增删查改．&lt;/p&gt;
&lt;p&gt;这个时候，我们就要用到&lt;strong&gt;变量(variable)&lt;/strong&gt;了．那么，我们怎么知道变量是存储在哪里的，我们又是怎样获取他的&lt;br&gt;值，并且修改呢？&lt;/p&gt;
&lt;p&gt;这个时候，我们就需要一个&lt;em&gt;特殊的地方&lt;/em&gt;来存放变量，然后我们可以在这个地方&lt;br&gt;找到我们所需要的变量了．这个＊特殊的地方*就是scope．&lt;/p&gt;
&lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;知道了为什么会有scope的存在，我们就很容易知道什么叫做scope了．个人认为的话，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;scope就是一个地方，用来存放变量的．因此，你可以通过scope来获取变量的值，&lt;br&gt;从而对这些变量进行基本的操作．&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;How_It_Works&quot;&gt;&lt;a href=&quot;#How_It_Works&quot; class=&quot;headerlink&quot; title=&quot;How It Works&quot;&gt;&lt;/a&gt;How It Works&lt;/h2&gt;&lt;p&gt;我们先来了解一些编译(compile)理论知识．&lt;/p&gt;
&lt;p&gt;首先，&lt;strong&gt;compile&lt;/strong&gt;主要分成３个步骤．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Lexing(Takenizing): 把一个要编译的语句分成一些有意义的taken.&lt;br&gt; 比如&lt;code&gt;var bar = 2;&lt;/code&gt;会被分成&lt;code&gt;var&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt; &lt;code&gt;2&lt;/code&gt;．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Parsing: 把所有的taken弄成一棵&lt;em&gt;AST&lt;/em&gt;(abstract syntax tree, 抽象语法树)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code Generation: 生成可执行代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;我们需要明确的一点是: JavaScript的代码是”从上到下”,”一句一句”的编译然后就立马执行的.&lt;/strong&gt;&lt;br&gt;(注意我使用了双引号)&lt;/p&gt;
&lt;p&gt;接下来,介绍3位好机油.分别是浏览器的Engine, Compiler, Scope.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engine: 负责分配任务,以及执行代码.&lt;/li&gt;
&lt;li&gt;Compiler: 接受Engine传递的任务,编译可执行的代码返回给Engine&lt;/li&gt;
&lt;li&gt;Scope: 存放变量,函数声明等.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么,让我们通过一个例子,来看看他们是如何合作的.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Engine will split this statement into 2 parts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// `var bar` and `bar = 10`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Engine: 先把&lt;code&gt;var bar&lt;/code&gt;交给Compiler.&lt;br&gt;Compiler: 问问Scope有没有声明过&lt;code&gt;bar&lt;/code&gt;这个变量.没有的话不管他,否则让Scope声明&lt;code&gt;bar&lt;/code&gt;变量.&lt;br&gt;Scope: 我这里没有&lt;code&gt;bar&lt;/code&gt;, 那我就声明吧.  &lt;/p&gt;
&lt;p&gt;Engine: 我要开始执行&lt;code&gt;bar = 10&lt;/code&gt;啦.Scope你好,请问你那里有没有&lt;code&gt;bar&lt;/code&gt;这个变量?&lt;br&gt;Scope: 当然!刚才Compiler叫我声明了.&lt;br&gt;Engine: 既然你&lt;code&gt;bar&lt;/code&gt;的话,那我就把&lt;code&gt;10&lt;/code&gt;赋值给他咯.&lt;/p&gt;
&lt;h2 id=&quot;Do_It&quot;&gt;&lt;a href=&quot;#Do_It&quot; class=&quot;headerlink&quot; title=&quot;Do It&quot;&gt;&lt;/a&gt;Do It&lt;/h2&gt;&lt;p&gt;通过Scope来查找变量,函数声明等等的过程叫做&lt;code&gt;identifier looking up&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;下面，我们通过一个例子，来看看怎么一回事．&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在第２行代码中，我们引用了&lt;code&gt;bar&lt;/code&gt;这个变量，并给他赋值了&lt;code&gt;２&lt;/code&gt;.&lt;br&gt;此时，这种引用就叫做&lt;strong&gt;LHS&lt;/strong&gt;(left hand side),也就是等号的右边．&lt;/p&gt;
&lt;p&gt;在第３行中，我们引用了&lt;code&gt;bar&lt;/code&gt;这个变量的值．此时，这个引用叫做&lt;strong&gt;RHS&lt;/strong&gt;(right hand side)，&lt;br&gt;也就是等号的右边，准确来说是等号的非左边．&lt;/p&gt;
&lt;p&gt;那么，LHS和RHS有什么不同呢？&lt;/p&gt;
&lt;p&gt;LHS只是获取变量,不在乎这个变量对应的值是什么.例子中,我们只想把&lt;code&gt;42&lt;/code&gt;赋值给&lt;code&gt;bar&lt;/code&gt;.&lt;br&gt;还有一种情况也是&lt;code&gt;LHS&lt;/code&gt;: 函数的参数.&lt;/p&gt;
&lt;p&gt;RHS是为了获取变量的值!例子中,我们想要的就是把&lt;code&gt;bar&lt;/code&gt;这个变量对应的值打印出来.&lt;/p&gt;
&lt;p&gt;RHS如果在scope中找不到这个变量,那么就会报错: &lt;code&gt;Reference Error&lt;/code&gt;.而LHS则会给&lt;code&gt;window&lt;/code&gt;&lt;br&gt;这个全局变量添加一个属性,如果在没有使用&lt;code&gt;use strict&lt;/code&gt;的情况下.比如:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;use strict;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子中,很明显在scope中是找不到&lt;code&gt;foo&lt;/code&gt;这个变量的.&lt;br&gt;又由于他是LHS,所有就会有&lt;code&gt;window.foo = 10;&lt;/code&gt;我们可以通过&lt;code&gt;console.log(window.hasOwnProperty(&amp;#39;foo&amp;#39;))&lt;/code&gt;来测试一下.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下面我们会学习JavaScript的scope，也就是作用域．其实很简单~&lt;br&gt;在讲什么是scope之前，我们先讲讲为什么会有scope的存在．&lt;/p&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://drakeleung.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="scope" scheme="http://drakeleung.github.io/blog/tags/scope/"/>
    
  </entry>
  
</feed>
